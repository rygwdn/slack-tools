#!/usr/bin/env node
import {Command}from'commander';import {readFileSync,promises,existsSync}from'fs';import {join,dirname}from'path';import {fileURLToPath}from'url';import v from'keytar';import {WebClient,LogLevel}from'@slack/web-api';import {join as join$1}from'node:path';import {platform,homedir as homedir$1}from'node:os';import {promisify}from'node:util';import {exec}from'child_process';import Se from'sqlite3';import {open}from'sqlite';import $e from'crypto';import {Level}from'level';import {homedir}from'os';import*as Ye from'fs/promises';import {FastMCP}from'fastmcp';import {z as z$1,ZodObject}from'zod';var E="slack-tools",he="slack-cookie";async function ke(r){for(let[e,s]of Object.entries(r.tokens))await v.setPassword(E,e,JSON.stringify(s));r.cookie&&await v.setPassword(E,he,JSON.stringify(r.cookie));}async function _(){try{let r=await v.findCredentials(E);if(r.length===0)return null;let e={},s=null;for(let t of r)if(t.account===he)try{s=JSON.parse(t.password);}catch(o){console.error("Failed to parse cookie from keychain:",o);}else try{let o=JSON.parse(t.password);e[t.account]=o;}catch(o){console.error(`Failed to parse token for ${t.account}:`,o);}return Object.keys(e).length===0||!s?null:{tokens:e,cookie:s}}catch(r){return console.error("Failed to read auth from keychain:",r),null}}async function U(){let r=await v.findCredentials(E);for(let e of r)await v.deletePassword(E,e.account);}function we(r){r.command("clear").description("Clear stored authentication from keychain").action(async()=>{try{console.error("Clearing stored authentication from keychain..."),await U(),console.error("Authentication cleared successfully.");}catch(e){console.error("Error:",e),process.exit(1);}});}var kt=promisify(exec);function be(r,e){try{let s=r.slice(0,3).toString(),t;if(s==="v10"||s==="v11")t=r.slice(3);else throw new Error("Unsupported cookie version");let o=Buffer.from(" ".repeat(16)),n=$e.createDecipheriv("aes-128-cbc",e,o),a=Buffer.concat([n.update(t),n.final()]),i=a.length;for(;i>0&&a[i-1]===0;)i--;return a.slice(0,i).toString("utf8")}catch(s){throw new Error(`Failed to decrypt cookie value: ${s instanceof Error?s.message:String(s)}`)}}async function wt(){try{let{stdout:r}=await kt('security find-generic-password -wa "Slack App Store Key"'),e=r.trim(),s=Buffer.from("saltysalt");return $e.pbkdf2Sync(e,s,1003,16,"sha1")}catch(r){throw new Error(`Could not retrieve Slack encryption key from keychain: ${r instanceof Error?r.message:String(r)}`)}}function yt(){let r=[join$1(homedir$1(),"Library/Application Support/Slack/Cookies"),join$1(homedir$1(),"Library/Containers/com.tinyspeck.slackmacgap/Data/Library/Application Support/Slack/Cookies")];for(let e of r)if(existsSync(e))return e;throw new Error("Could not find Slack's cookies database")}async function R(){try{let r=yt(),e=await wt(),s=await open({filename:r,driver:Se.Database,mode:Se.OPEN_READONLY});try{let t=await s.all('SELECT name, encrypted_value FROM cookies WHERE name = "d" ORDER BY LENGTH(encrypted_value) DESC');if(!t||t.length===0||!t[0].encrypted_value)throw new Error('Could not find any Slack "d" cookies in cookies database');if(t.length>1){let i=new Set,c=[];for(let l of t)try{let d=be(l.encrypted_value,e),u=d.indexOf("xoxd-");if(u!==-1){let m=d.substring(u);i.add(m),c.push({...l,decryptedValue:m});}}catch{}if(i.size>1)throw new Error(`Found ${i.size} different Slack tokens in cookies. Please clear unused cookies.`)}let o=t[0],n=be(o.encrypted_value,e),a=n.indexOf("xoxd-");if(a!==-1){let i=n.substring(a);return {name:o.name,value:i}}if(!n.startsWith("xoxd-"))throw new Error("Decrypted cookie value does not have the required xoxd- prefix");return {name:o.name,value:n}}finally{await s.close();}}catch(r){throw new Error(`Failed to extract Slack cookie: ${r instanceof Error?r.message:String(r)}`)}}function St(){if(platform()==="darwin"){let r=[join$1(homedir$1(),"Library/Containers/com.tinyspeck.slackmacgap/Data/Library/Application Support/Slack/Local Storage/leveldb"),join$1(homedir$1(),"Library/Application Support/Slack/Local Storage/leveldb")];for(let e of r)if(e)return e;throw new Error("Could not find Slack's Local Storage directory on macOS")}else if(platform()==="linux")return join$1(homedir$1(),".config/Slack/Local Storage/leveldb");throw new Error("slacktokens only works on macOS or Linux.")}async function I(r){let e=St(),s=new Level(e,{createIfMissing:false});try{await s.open();let t,o=await s.iterator().all();for(let[i,c]of o)if(i.toString().includes("localConfig_v2")){t=c.toString();break}if(!t)throw new Error("Slack's Local Storage not recognised: localConfig not found");let n=JSON.parse(t.slice(1)),a={};for(let i of Object.values(n.teams))a[i.url]={token:i.token,name:i.name};return a}catch(t){if(console.error("Error:",t),t&&typeof t=="object"&&"code"in t){let o=t;if(o.code==="LEVEL_DATABASE_NOT_OPEN"&&o.cause?.code==="LEVEL_LOCKED")throw new Error(`Slack's Local Storage database is locked. Please make sure Slack is completely closed:
1. Quit Slack from the menu bar
2. Check Activity Monitor/Task Manager to ensure no Slack processes are running
3. Try running this command again`)}throw t}finally{r?.debug&&r.debugLog("Closing database"),s.status==="open"&&await s.close();}}var F=false;function Me(r,e,s){return new WebClient(r,{headers:{Cookie:`d=${e.value}`},logLevel:s?.debug?LogLevel.DEBUG:LogLevel.ERROR})}async function xe(r,e){let s=Object.values(r.tokens)[0]?.token;if(!s)throw new Error("Auth test failed: No token found");try{if(!(await Me(s,r.cookie,e).auth.test()).ok)throw new Error("Auth test failed: API returned not ok")}catch(t){throw console.error("Auth test API call failed:",t),new Error("Auth test failed: API call error")}}async function ne(r){let e={cookie:await R(),tokens:await I(r)};return await xe(e,r),await ke(e),e}async function $t(r){let e=await _();if(e?.cookie&&e?.tokens)try{return await xe(e,r),F=!0,e}catch(s){console.error("Auth error encountered, clearing stored credentials and retrying...",s),await U();let t=await ne(r);return F=true,t}else {let s=await ne(r);return F=true,s}}function W(r,e,s){if(!r.cookie)throw new Error("No cookie found in auth");if(s.debugLog("Available workspaces:",Object.keys(r.tokens).join(", ")),s.debugLog("Looking for workspace:",e),r.tokens[e]){let o=r.tokens[e].token;return s.debugLog(`Found token for workspace URL: ${e}`),s.debugLog(`Token: ${o.substring(0,5)}...${o.substring(o.length-5)}`),{token:o,workspaceUrl:e,cookie:r.cookie}}let t=Object.entries(r.tokens).find(([,o])=>o.name.toLowerCase()===e.toLowerCase());if(t){let o=t[1].token;return s.debugLog(`Found token for workspace name: ${t[1].name}`),s.debugLog(`Workspace URL: ${t[0]}`),s.debugLog(`Token: ${o.substring(0,5)}...${o.substring(o.length-5)}`),{token:o,workspaceUrl:t[0],cookie:r.cookie}}throw s.debugLog("All available workspaces:"),Object.entries(r.tokens).forEach(([o,n])=>{s.debugLog(`- ${n.name} (${o})`);}),new Error(`Could not find workspace "${e}". Use 'slack-tools print' to see available workspaces.`)}async function k(r,e){let s=F?await _()||await ne(e):await $t(e),{token:t,cookie:o,workspaceUrl:n}=W(s,r,e);if(e.debugLog(`Using workspace: ${n}`),!t.startsWith("xoxc-"))throw new Error(`Invalid token format: token should start with 'xoxc-'. Got: ${t}`);return Me(t,o,e)}function ve(r,e){r.command("print").description("Print tokens and cookie").option("-q, --quiet","Suppress output and only show tokens/cookies").action(async s=>{try{s.quiet||console.log("Getting Slack credentials...");let t=e.hasWorkspace?e.workspace:"default",o=await _();!s.quiet&&!o&&console.log("No stored auth found, fetching fresh credentials...");let n=o||{cookie:await R(),tokens:await I(e)};try{let{token:a,cookie:i,workspaceUrl:c}=W(n,t,e);s.quiet?(console.log(a),console.log(i.value)):(console.log(`
Found token for workspace:
`),console.log(`Workspace URL: ${c}`),console.log(`Token: ${a}
`),console.log("Found cookie:"),console.log(`${i.name}: ${i.value}
`));}catch(a){if(e.hasWorkspace)console.error(`Error getting workspace "${e.workspace}":`,a),process.exit(1);else try{let i=Object.keys(n.tokens)[0];if(!i)throw new Error("No workspaces available");let{token:c,cookie:l,workspaceUrl:d}=W(n,i,e);s.quiet?(console.log(c),console.log(l.value)):(console.log(`
Found token for workspace:
`),console.log(`Workspace URL: ${d}`),console.log(`Token: ${c}
`),console.log("Found cookie:"),console.log(`${l.name}: ${l.value}
`),console.log(`
Tip: To specify a workspace directly, use:`),console.log("  - Use -w, --workspace <workspace> to specify a workspace"),console.log("  - Use -l, --last-workspace to use your most recently used workspace"));}catch(i){console.error("Error getting any workspace token:",i),process.exit(1);}}}catch(t){console.error("Error:",t),process.exit(1);}});}async function Ee(r,e){let s;if(r.since){if(s=new Date(r.since),isNaN(s.getTime()))throw new Error(`Invalid start date: ${r.since}, use YYYY-MM-DD format`)}else {let o=new Date;s=new Date(o),s.setHours(0,0,0,0),e.debugLog(`Using start date: ${s.toISOString()}`);}let t;if(r.until){if(t=new Date(r.until),isNaN(t.getTime()))throw new Error(`Invalid end date: ${r.until}, use YYYY-MM-DD format`);t.setHours(23,59,59,999);}else {let o=new Date;t=new Date(o),t.setHours(23,59,59,999),e.debugLog(`Using end date: ${t.toISOString()}`);}return {startTime:s,endTime:t}}function ae(r){return r.toISOString().split("T")[0]}function _e(r){let e=new Date(r);return e.setDate(e.getDate()-1),e}function De(r){let e=new Date(r);return e.setDate(e.getDate()+1),e}async function Tt(r,e,s){let t=e.replace(/^@/,"").replace(/^"(.*)"$/,"$1");try{if(/^U[A-Z0-9]{8,}$/.test(t)){let c=await r.users.info({user:t});if(c.ok&&c.user)return `<@${t}>`}if(/.+@.+\..+/.test(t)){let c=await r.users.lookupByEmail({email:t});if(c.ok&&c.user)return `<@${c.user.id}>`}let n=(await r.users.list({})).members||[],a=n.find(c=>c.profile?.real_name?.toLowerCase()===t.toLowerCase()||c.profile?.display_name?.toLowerCase()===t.toLowerCase()||c.name?.toLowerCase()===t.toLowerCase());if(a)return `<@${a.id}>`;let i=n.filter(c=>c.profile?.real_name?.toLowerCase().includes(t.toLowerCase())||c.profile?.display_name?.toLowerCase().includes(t.toLowerCase())||c.name?.toLowerCase().includes(t.toLowerCase()));return i.length===1?`<@${i[0].id}>`:i.length>1?(s.debugLog(`Multiple users found matching "${t}". Using the first match.`),`<@${i[0].id}>`):(s.debugLog(`No user found matching "${t}". Using as-is.`),`@${t}`)}catch(o){return s.debugLog(`Error resolving user "${e}": ${o}`),`@${t}`}}async function Pe(r,e,s){let t=/(from:|to:|with:)@?(("([^"]+)")|([^\s]+))/g,o=Array.from(e.matchAll(t));if(o.length===0)return e;let n=e;for(let a of o){let[i,c,l,d,u,m]=a,h=await Tt(r,u||m,s),C=`${c}${h}`;n=n.replace(i,C);}return s.debugLog(`Enhanced query: "${n}"`),n}async function Ae(r,e,s,t,o){if(!e)throw new Error("Username is required for searching messages");let n=_e(s.startTime),a=De(s.endTime),i=ae(n),c=ae(a),l=`from:${e} after:${i} before:${c}`;o.debugLog(`Search query: ${l}`);let d=await L(r,l,t,o),u=`is:thread with:@${e} after:${i} before:${c}`;o.debugLog(`Thread query: ${u}`);let m=await L(r,u,t,o),g=`to:${e} after:${i} before:${c}`;o.debugLog(`Mention query: ${g}`);let h=await L(r,g,t,o);return {messages:d,threadMessages:m,mentionMessages:h}}async function L(r,e,s,t){t.debugLog(`Original search query: ${e}`);let o=await Pe(r,e,t);t.debugLog(`Executing search with enhanced query: ${o}`);try{return (await r.search.messages({query:o,sort:"timestamp",sort_dir:"asc",count:s})).messages?.matches||[]}catch(n){throw t.debugLog(`Search error: ${n}`),new Error(`Failed to search Slack: ${n}`)}}var le=join(homedir(),".slack-tools"),Ne=join(le,"config.json"),Ue=join(le,"slack-cache.json"),Mt=24*60*60*1e3,ie={lastWorkspace:null};async function j(){try{await promises.mkdir(le,{recursive:!0});}catch(r){throw console.error("Failed to create config directory:",r),new Error(`Could not create cache directory: ${r.message}`)}}async function Re(){await j();try{let r=await promises.readFile(Ne,"utf8");return {...ie,...JSON.parse(r)}}catch(r){return r.code==="ENOENT"||console.error("Failed to load config:",r),ie}}async function xt(r){await j();try{await promises.writeFile(Ne,JSON.stringify(r,null,2));}catch(e){throw console.error("Failed to save config:",e),new Error(`Could not save cache configuration: ${e.message}`)}}async function O(){return (await Re()).lastWorkspace}async function Ie(r){let e=await Re();e.lastWorkspace=r,await xt(e);}async function Fe(r=Ue,e=Mt){try{await j();let s=await promises.readFile(r,"utf-8"),t=JSON.parse(s);if(Date.now()-t.lastUpdated<e)return t}catch{}return null}async function M(r,e=Ue){await j(),await promises.writeFile(e,JSON.stringify(r,null,2));}function vt(r){let e=new Set,s=new Set;for(let t of r){t.user&&e.add(t.user),t.channel?.id&&s.add(t.channel.id);let o=/<@([A-Z0-9]+)>/g,n=t.text?.match(o)||[];for(let c of n){let l=c.slice(2,-1);e.add(l);}let a=/<#([A-Z0-9]+)(\|[^>]+)?>/g,i=(t.text||"").match(a)||[];for(let c of i){let l=c.slice(2).split("|")[0];s.add(l);}}return {userIds:e,channelIds:s}}async function Et(r,e,s,t,o){for(let n of e)try{let a=await r.users.info({user:n});a.ok&&a.user&&(s.users[n]={displayName:a.user.real_name||a.user.name||n,isBot:!!a.user.is_bot||(a.user.name||"").includes("bot")},o&&t.debugLog(`Added missing user to cache: ${s.users[n].displayName}`));}catch(a){t.debugLog(`Could not fetch info for user ${n}:`,a);}}async function _t(r,e,s,t,o){if(!s.users[e])try{let n=await r.users.info({user:e});n.ok&&n.user&&(s.users[e]={displayName:n.user.real_name||n.user.name||e,isBot:!!n.user.is_bot||(n.user.name||"").includes("bot")},o&&t.debugLog(`Added missing DM user to cache: ${s.users[e].displayName}`));}catch(n){t.debugLog(`Could not fetch info for DM user ${e}:`,n);}}async function Dt(r,e,s){try{return (await r.conversations.members({channel:e})).members||[]}catch(t){s.debugLog(`Could not fetch members for channel ${e}:`,t);return}}async function Pt(r,e,s,t,o,n){for(let a of e)try{let i=await r.conversations.info({channel:a});if(i.ok&&i.channel){let c=i.channel,l=c.name||a,d;if(c.is_im){let u="user"in c?c.user:void 0;u&&(n.add(u),await _t(r,u,s,t,o),d=[u]);}else c.is_mpim&&(d=await Dt(r,a,t));s.channels[a]={displayName:l,type:c.is_im?"im":c.is_mpim?"mpim":"channel",members:d},o&&t.debugLog(`Added missing channel to cache: ${l}`);}}catch(i){t.debugLog(`Could not fetch info for channel ${a}:`,i);}}async function At(){return await Fe()||{users:{},channels:{},lastUpdated:0}}async function x(r,e,s){let t=await At(),o=t.lastUpdated>0,{userIds:n,channelIds:a}=vt(e),i=Array.from(n).filter(l=>!t.users[l]),c=Array.from(a).filter(l=>!t.channels[l]);return o?(s.debugLog("Using cached user and channel information with updates for missing entries"),s.debugLog(`Found ${i.length} users and ${c.length} channels missing from cache`)):s.debugLog("No cache found, fetching all user and channel information"),await Et(r,i,t,s,o),await Pt(r,c,t,s,o,n),t.lastUpdated=Date.now(),await M(t),t}async function B(r,e,s){try{let t=s.workspace,o=await k(t,s),a=(await o.auth.test()).user_id;s.debugLog(`Searching messages with query: ${r}`);let i=await L(o,r,e,s);s.debugLog(`Found ${i.length} matching messages. Fetching details...`);let c=await x(o,i,s);return c.lastUpdated=Date.now(),await M(c),{messages:i,userId:a,channels:c.channels,users:c.users}}catch(t){throw new Error(`Search failed: ${t}`)}}function me(r){if(!r)return "";let e=r;return e.startsWith(":")||(e=`:${e}:`),e.endsWith(":")||(e=`${e}:`),e}function Nt(r){return r?Math.floor(Date.now()/1e3)+r*60:0}async function z(r,e,s,t){try{let o=e.workspace;e.debugLog("Setting status for workspace:",o);let n=me(s||"");n&&e.debugLog("Using emoji:",n);let a=Nt(t);t?e.debugLog("Status will expire in",t,"minutes at",new Date(a*1e3).toISOString()):e.debugLog("Setting permanent status (no expiration)");let c=await(await k(o,e)).users.profile.set({profile:{status_text:r,status_emoji:n,status_expiration:a}});return e.debugLog("API response:",c),{success:!0,text:r,emoji:n,expirationTime:a?new Date(a*1e3).toISOString():null}}catch(o){throw new Error(`Status update failed: ${o}`)}}async function We(r){try{let e=r.workspace,t=await(await k(e,r)).users.profile.get({});return {status:t.profile?.status_text||"",emoji:t.profile?.status_emoji||"",expirationTime:t.profile?.status_expiration?new Date(Number(t.profile.status_expiration)*1e3).toISOString():null}}catch(e){throw new Error(`Status retrieval failed: ${e}`)}}async function Y(r,e,s,t){try{let o=s.workspace;s.debugLog("Creating reminder for workspace:",o),s.debugLog("Reminder text:",r),s.debugLog("Reminder time:",e),t&&s.debugLog("Reminder for user:",t);let a=await(await k(o,s)).reminders.add({text:r,time:e,user:t});return s.debugLog("API response:",a),{success:!0,reminder:a.reminder}}catch(o){throw new Error(`Reminder creation failed: ${o}`)}}async function J(r,e,s,t){try{let o=s.workspace;s.debugLog("Getting thread replies in workspace:",o),s.debugLog("Channel:",r),s.debugLog("Thread timestamp:",e),t&&s.debugLog("Limit:",t);let n=await k(o,s),i=(await n.conversations.replies({channel:r,ts:e,limit:t})).messages?.filter(d=>d.ts!==e)||[];s.debugLog("Found replies:",i.length);let c=i.map(d=>({iid:d.ts,ts:d.ts,text:d.text,user:d.user,channel:{id:r},team:d.team})),l=await x(n,c,s);return {replies:i,channels:l.channels,users:l.users}}catch(o){throw new Error(`Getting thread replies failed: ${o}`)}}async function G(r,e,s){try{let t=e.workspace;e.debugLog("Getting user activity for workspace:",t),s&&e.debugLog("User:",s);let o=await k(t,e),n=s;n||(n=(await o.auth.test()).user_id,e.debugLog("Using current user ID:",n));let a=`from:<@${n}>`,i=await L(o,a,r,e);e.debugLog(`Found ${i.length} messages for user`);let c=await x(o,i,e),l={};i.forEach(u=>{let m=u.channel?.id||"unknown";l[m]=(l[m]||0)+1;});let d=Object.entries(l).map(([u,m])=>({channelId:u,channelName:c.channels[u]?.displayName||"Unknown channel",messageCount:m}));return d.sort((u,m)=>m.messageCount-u.messageCount),{userId:n,totalMessages:i.length,channelBreakdown:d,timePeriod:`Last ${r} messages`}}catch(t){throw new Error(`Getting user activity failed: ${t}`)}}async function je(r,e){try{let s=e.workspace,t=await k(s,e),o=await t.users.info({user:r});if(!o.ok||!o.user)throw new Error(`User not found: ${r}`);let n=await t.users.profile.get({user:r});if(!n.ok||!n.profile)throw new Error(`Profile not found for user: ${r}`);return {userId:r,username:o.user.name,realName:o.user.real_name,displayName:n.profile.display_name||o.user.real_name||o.user.name,email:n.profile.email,phone:n.profile.phone,title:n.profile.title,teamId:o.user.team_id,timezone:o.user.tz,timezoneLabel:o.user.tz_label,avatarUrl:n.profile.image_original||n.profile.image_512,status:{text:n.profile.status_text||"",emoji:n.profile.status_emoji||"",expiration:n.profile.status_expiration?new Date(Number(n.profile.status_expiration)*1e3).toISOString():null},isBot:o.user.is_bot||!1,isAdmin:o.user.is_admin||!1,isOwner:o.user.is_owner||!1,isRestricted:o.user.is_restricted||!1,isUltraRestricted:o.user.is_ultra_restricted||!1,updated:o.user.updated?new Date(Number(o.user.updated)*1e3).toISOString():null}}catch(s){throw new Error(`User profile retrieval failed: ${s}`)}}function Oe(r,e){r.command("status <text>").description("Set your Slack status").option("--emoji <emoji>","Emoji for the status (optional)").option("--duration <duration>","Duration in minutes before status expires (omit for permanent)").action(async(s,t)=>{try{let o=t.emoji||"",n=me(o),a;t.duration?(a=parseInt(t.duration,10),console.log(`Setting status to "${s}"${n?` with emoji ${n}`:""} for ${a} minutes`)):console.log(`Setting status to "${s}"${n?` with emoji ${n}`:""} permanently`),await z(s,e,o,a),console.log("Status set successfully!");}catch(o){console.error("Error:",o),e.debug||console.log(`
Tip: Run with -d/--debug flag for more troubleshooting information`),process.exit(1);}});}function Be(r,e){r.command("test").description("Test authentication with Slack API").action(async s=>{try{let t=e.workspace;e.debugLog("Testing authentication for workspace:",t),console.log("Testing auth for workspace:",t);let o=await k(t,e);e.debugLog("Calling auth.test API endpoint");let n=await o.auth.test();e.debugLog("Full API response:",n),console.log(`
API Response:`),console.log(JSON.stringify(n,null,2));}catch(t){console.error("Error:",t),e.debug||console.log(`
Tip: Run with -d/--debug flag for more troubleshooting information`),process.exit(1);}});}function b(r,e,s){let t=e.channels[r];if(!t)return r;if(t.type==="channel")return `#${t.displayName}`;if(t.type==="im"&&t.members&&t.members.length>0){let o=t.members[0],n=e.users[o];return `DM with ${n?n.displayName:t.displayName}`}return t.type==="mpim"&&t.members?`Group DM with ${t.members.filter(n=>n!==s).map(n=>e.users[n]?.displayName||n).join(", ")}`:r}function V(r,e){return r?(r=r.replace(/<@([A-Z0-9]+)(?:\|([^>]+))?>/g,(s,t,o)=>{let n=e.users[t];return n?`@${n.displayName}`:o?`@${o}`:s}),r=r.replace(/<#([A-Z0-9]+)(?:\|([^>]+))?>/g,(s,t,o)=>{if(o)return `#${o}`;let n=e.channels[t];return n?`#${n.displayName}`:s}),r=r.replace(/<((?:https?:\/\/)[^|>]+)\|([^>]+)>/g,"[$2]($1)"),r=r.replace(/<((?:https?:\/\/)[^>]+)>/g,"$1"),r.split(`
`).join(`
    `)):""}function H(r){let e=r.getHours().toString().padStart(2,"0"),s=r.getMinutes().toString().padStart(2,"0");return `${e}:${s}`}function Ut(r){return typeof r.ts=="string"}function Rt(r){if(r)try{return new URL(r).searchParams.get("thread_ts")||void 0}catch{return}}function It(r,e,s,t,o){let n=e.some(i=>{let c=i.user===t,l=i.threadMessages?.some(d=>d.user===t)??false;return c||l}),a=s.channels[r];if(!a)return  true;if(a.type==="im"){let c=s.users[a.members?.[0]||""]?.isBot||false,l=n||!c;return l||o.debugLog(`Filtering out bot channel: ${b(r,s,t)}`),l}return  true}function Ft(r,e){let s=new Map,t=[];for(let o of r){if(!Ut(o)){e.debugLog("Skipping message without timestamp");continue}let n=o.thread_ts||Rt(o.permalink),a,i=false;if(o.permalink){if(o.permalink.includes("thread_ts="))a=o.permalink,i=o.permalink.includes(`thread_ts=${o.ts}`);else if(n)try{let c=new URL(o.permalink);c.searchParams.set("thread_ts",n),a=c.toString();}catch{a=o.permalink;}}if(n&&o.ts!==n){s.has(n)||s.set(n,[]);let c=s.get(n);if(!c.some(l=>l.ts===o.ts)){let l={...o,thread_ts:n,threadPermalink:a,hasReplies:false};c.push(l),e.debugLog(`Added message to thread: ${o.text?.slice(0,50)}`);}}else {let c={...o,threadPermalink:a,hasReplies:i};t.push(c),e.debugLog(`Added standalone/parent message: ${o.ts} ${n} ${o.text?.slice(0,50)}`);}}return {threadMap:s,standaloneMessages:t}}function q(r,e=[],s,t){let n=new Date(Number(r.ts)*1e3).toISOString().split("T")[0],a=r.channel?.id||"unknown";s.has(n)||s.set(n,new Map);let i=s.get(n);i.has(a)||i.set(a,[]);let c=i.get(a);e.length>0&&t.debugLog(`Adding message with ${e.length} thread replies to ${a}`),c.push({...r,threadMessages:e});}function Wt(r,e,s){let t=new Map;for(let o of r)if(o.ts&&e.has(o.ts)){let a=e.get(o.ts).filter(c=>c.ts!==o.ts),i={...o,hasReplies:a.length>0,threadPermalink:o.threadPermalink||o.permalink};q(i,a,t,s);}else q({...o,hasReplies:false},[],t,s);for(let[o,n]of e.entries()){if(r.some(c=>c.ts===o))continue;let a=n.sort((c,l)=>Number(c.ts)-Number(l.ts)),i=a.find(c=>c.ts===o);if(i){let c=a.filter(d=>d.ts!==i.ts),l={...i,hasReplies:c.length>0,threadPermalink:i.threadPermalink||i.permalink};q(l,c,t,s);}else {let c=a[0];s.debugLog(`Thread ${o} missing parent, using first reply as parent`);let l=a.find(m=>m.threadPermalink)?.threadPermalink||c.permalink,d={...c,thread_ts:o,ts:o,text:c.text,user:c.user,channel:c.channel,hasReplies:true,threadPermalink:l},u=a.filter(m=>m.ts!==c.ts);q(d,u,t,s);}}return t}function jt(r,e,s){let t="",o=new Date(Number(r.ts)*1e3),n=H(o),a=r.username||"Unknown User";r.user&&e.users[r.user]&&(a=e.users[r.user].displayName),s.debugLog(`Formatting message from ${a}`);let i="";r.hasReplies&&(r.thread_ts===r.ts||r.permalink?.includes(`thread_ts=${r.ts}`)?i=` [\u{1F4AC} Start of Thread](${r.threadPermalink||r.permalink||""})`:i=` [\u{1F4AC} Part of Thread](${r.threadPermalink||r.permalink||""})`),t+=`- [*${n}*](${r.permalink||""}) **${a}**${i}: `;let l=V(r.text||"",e).split(`
`);if(t+=l[0]+`
`,l.length>1){let d="    ";t+=l.slice(1).map(u=>`${d}${u}`).join(`
`)+`
`;}return t}function Ot(r,e){let s="",t=r.sort((o,n)=>Number(o.ts)-Number(n.ts));for(let o of t){let n=new Date(Number(o.ts)*1e3),a=H(n),i=o.username||"Unknown User";o.user&&e.users[o.user]&&(i=e.users[o.user].displayName),s+="        - ",o.permalink?s+=`[*${a}*](${o.permalink})`:s+=`*${a}*`;let l=V(o.text||"",e).split(`
`);if(s+=` **${i}**: ${l[0]}
`,l.length>1){let d="            ";s+=l.slice(1).map(u=>`${d}${u}`).join(`
`)+`
`;}}return s}function ze(r,e,s,t){let o="";t.debugLog(`Processing ${r.length} total messages`);let{threadMap:n,standaloneMessages:a}=Ft(r,t),i=Wt(a,n,t),c=Array.from(i.keys()).sort();for(let l of c){let d=new Date(l);o+=`# ${d.toDateString()}

`;let u=i.get(l),m=Array.from(u.entries()).map(([g,h])=>[g||"unknown",h]).filter(([g,h])=>It(g,h,e,s,t)).sort(([g],[h])=>{let C=b(g,e,s),y=b(h,e,s);return C.localeCompare(y)});for(let[g,h]of m){let C=b(g,e,s);o+=`## ${C}

`;let y=h.sort((w,T)=>Number(w.ts)-Number(T.ts));for(let w of y)o+=jt(w,e,t),w.threadMessages?.length&&(t.debugLog(`Adding ${w.threadMessages.length} thread replies for message: ${w.text?.slice(0,50)}`),o+=Ot(w.threadMessages,e),o+=`
`);o+=`
`;}}return o}async function K(r,e){let s=await Ee(r,e),t=await k(e.workspace,e),o=await t.auth.test(),n=o.user_id,a=r.username||o.user;e.debugLog(`Generating my messages summary for user: ${a}`),e.debugLog(`Date range: ${s.startTime.toLocaleDateString()} to ${s.endTime.toLocaleDateString()}`);let{messages:i,threadMessages:c,mentionMessages:l}=await Ae(t,a,s,r.count,e),d=[...i,...c,...l];e.debugLog(`Found ${i.length} direct messages, ${c.length} thread messages, and ${l.length} mention messages`),e.debugLog(`Found ${d.length} total messages. Fetching details...`);let u=await x(t,d,e);e.debugLog("Formatting report...");let m=ze(d,u,n,e);return u.lastUpdated=Date.now(),await M(u),{markdown:m,allMessages:d,userId:n,dateRange:s,cache:u}}function Je(r,e){r.command("my-messages").description("Generate a summary of your Slack activity including messages you sent and messages mentioning you").option("-u, --username <username>","Slack username to filter by").option("-s, --since <date>","Start date (YYYY-MM-DD format), defaults to today").option("-e, --until <date>","End date (YYYY-MM-DD format), defaults to today").option("-c, --count <number>","Number of messages to fetch (default: 200)","200").option("-o, --output <file>","Output markdown to a file").action(async s=>{try{let t=e.workspace,o=parseInt(s.count,10);e.debugLog(`Generating daily summary for workspace: ${t}`);let n=await K({username:s.username,since:s.since,until:s.until,count:o},e);s.output?(await Ye.writeFile(s.output,n.markdown),console.log(`Report written to: ${s.output}`)):console.log(n.markdown);}catch(t){console.error("Error:",t),process.exit(1);}});}function Z(r,e,s,t){let o="";if(r.length===0)return t.debugLog("No search results found"),`# Search Results

No messages found matching your search criteria.
`;t.debugLog(`Processing ${r.length} search results`);let n=new Map;for(let i of r){let c=i.channel?.id||"unknown";n.has(c)||n.set(c,[]),n.get(c).push(i);}let a=Array.from(n.keys()).sort((i,c)=>{let l=b(i,e,s),d=b(c,e,s);return l.localeCompare(d)});o+=`# Search Results

`;for(let i of a){let c=n.get(i),l=b(i,e,s);o+=`## ${l}

`;let d=c.sort((u,m)=>!u.ts||!m.ts?0:Number(u.ts)-Number(m.ts));for(let u of d){if(!u.ts)continue;let m=new Date(Number(u.ts)*1e3),g=m.toLocaleDateString(),h=H(m),C=u.username||"Unknown User";u.user&&e.users[u.user]&&(C=e.users[u.user].displayName);let y="",w=u.ts||"",T=u.permalink||"";if(T.includes("thread_ts=")){let N=T.match(/thread_ts=([^&]+)/);(N?N[1]:"")===w?y=` [\u{1F4AC} Start of Thread](${T})`:y=` [\u{1F4AC} Part of Thread](${T})`;}o+=`- **${g}** [${h}](${u.permalink||""}) **${C}**:${y} `;let re=V(u.text||"",e).split(`
`);if(o+=re[0]+`
`,re.length>1){let N="    ";o+=re.slice(1).map(ge=>`${N}${ge}`).join(`
`)+`
`;}o+=`
`;}o+=`
`;}return o}function Ge(r){let e=`# Current Slack Status

`;if(!r.status&&!r.emoji)return e+=`No status is currently set.
`,e;if(r.emoji?e+=`**Status:** ${r.emoji} ${r.status}

`:e+=`**Status:** ${r.status}

`,r.expirationTime){let s=new Date(r.expirationTime);e+=`**Expires:** ${s.toLocaleString()}
`;}else e+=`**Expires:** Never (permanent status)
`;return e}function qe(r){let e=`# Status Update

`;if(r.success)if(e+=`\u2705 Status updated successfully

`,r.emoji?e+=`**New Status:** ${r.emoji} ${r.text}

`:e+=`**New Status:** ${r.text}

`,r.expirationTime){let s=new Date(r.expirationTime);e+=`**Expires:** ${s.toLocaleString()}
`;}else e+=`**Expires:** Never (permanent status)
`;else e+=`\u274C Failed to update status

`;return e}function He(r,e){r.command("search <query>").description("Search Slack messages and output results as markdown").option("-c, --count <number>","Number of messages to fetch (default: 100)","100").option("-o, --output <file>","Output markdown to a file").action(async(s,t)=>{try{let o=parseInt(t.count,10);e.debugLog(`Searching Slack for: "${s}"`);let n=await B(s,o,e),a=n.messages,i=n.userId,c={lastUpdated:Date.now(),channels:n.channels,users:n.users};e.debugLog("Formatting report...");let l=Z(a,c,i,e);t.output?(await Ye.writeFile(t.output,l),console.log(`Search results written to: ${t.output}`)):console.log(l);}catch(o){console.error("Error:",o),process.exit(1);}});}var Bt=z$1.object({username:z$1.string().optional().describe("Username or display name to fetch messages for. If omitted, fetches messages for the current user."),since:z$1.string().optional().describe('Start date in YYYY-MM-DD format (e.g., "2023-01-15"). If omitted, defaults to the beginning of the current day.'),until:z$1.string().optional().describe('End date in YYYY-MM-DD format (e.g., "2023-01-15"). If omitted, defaults to the end of the current day.'),count:z$1.number().int().default(200).describe("Maximum number of messages to retrieve (1-1000). Default is 200.")}),Ke={name:"slack_my_messages",description:"Fetch and summarize messages sent by the user in Slack within a given time range.",parameters:Bt,annotations:{},execute:async({username:r,since:e,until:s,count:t},{session:o})=>(await K({username:r,since:e,until:s,count:t},o.context)).markdown};var zt=z$1.object({query:z$1.string().describe('Search query with Slack search modifiers. Supports operators like "from:", "to:", "with:", "in:", "has:", etc. For user searches, use from:@username (e.g., from:@john.doe) or from:"Display Name" (with quotes for names with spaces). For channel searches, use in:channel_name (e.g., in:general) or in:<#C12345> (using channel ID). Use the slack_user_search or slack_channel_search tools first to find the correct format if needed.'),count:z$1.number().int().optional().default(100).describe("Maximum number of results to return (1-1000). Default is 100.")}),Ze={name:"slack_search",description:"Perform a search in Slack using standard Slack search syntax and return matching messages.",parameters:zt,annotations:{},execute:async({query:r,count:e},{session:s})=>{let t=await B(r,e,s.context),o={channels:t.channels,users:t.users};return Z(t.messages,o,t.userId,s.context)}};var Yt=z$1.object({text:z$1.string().describe("Status text to display (up to 100 characters)"),emoji:z$1.string().optional().describe('Emoji code to display with status (without colons, e.g. "computer" for :computer:)'),duration:z$1.number().int().optional().describe("Duration in minutes before automatically clearing the status")}),Jt=z$1.object({}),Qe={name:"slack_set_status",description:"Set the current user's Slack status, optionally with an emoji and duration.",parameters:Yt,annotations:{},execute:async({text:r,emoji:e,duration:s},{session:t})=>{let o=await z(r,t.context,e,s);return qe(o)}},Xe={name:"slack_get_status",description:"Get the current user's Slack status including text, emoji, and expiration.",parameters:Jt,annotations:{},execute:async(r,{session:e})=>{let s=await We(e.context);return Ge(s)}};var Gt=z$1.object({text:z$1.string().describe("The reminder text (what you want to be reminded about)"),time:z$1.string().describe('When to send the reminder. Supports unix timestamp, ISO datetime (YYYY-MM-DDTHH:MM:SS), or natural language like "in 5 minutes", "tomorrow at 9am", "next Monday"'),user:z$1.string().optional().describe('Slack user ID to create the reminder for. If omitted, creates reminder for the current user. Must start with "U" followed by alphanumeric characters.')}),et={name:"slack_create_reminder",description:"Create a reminder in Slack for yourself or another user.",parameters:Gt,annotations:{},execute:async({text:r,time:e,user:s},{session:t})=>{let o=await Y(r,e,t.context,s);return `
## Reminder Created
- **Text:** ${r}
- **Time:** ${e}
${s?`- **User:** ${s}`:""}
- **Success:** ${o.success?"\u2705":"\u274C"}
    `.trim()}};var qt=z$1.object({channel:z$1.string().describe("Slack channel ID where the thread is located (starts with C, D, or G followed by alphanumeric characters)"),ts:z$1.string().describe('Timestamp of the parent message in Unix epoch time format (e.g., "1234567890.123456")'),limit:z$1.number().int().optional().describe("Maximum number of replies to fetch (1-1000). If not specified, defaults to all replies.")}),tt={name:"slack_get_thread_replies",description:"Fetch replies for a specific message thread in a Slack channel.",parameters:qt,annotations:{},execute:async({channel:r,ts:e,limit:s},{session:t})=>{let o=await J(r,e,t.context,s),n=`## Thread Replies

`;return o.replies.length===0?n+="No replies found in this thread.":(n+=`Found ${o.replies.length} replies:

`,o.replies.forEach((a,i)=>{let c=o.users[a.user??""]?.displayName||a.user,l=a.ts?new Date(parseInt(a.ts)*1e3).toLocaleString():"Unknown time";n+=`### Reply ${i+1}
`,n+=`- **From:** ${c}
`,n+=`- **Time:** ${l}
`,n+=`- **Text:** ${a.text||""}

`;})),n}};var Vt=z$1.object({count:z$1.number().int().optional().default(100).describe("Number of recent messages to analyze (1-1000). Default is 100."),user:z$1.string().optional().describe(`Slack user ID to analyze activity for (e.g. "U12345678"). If omitted, analyzes the current user's activity.`)}),rt={name:"slack_user_activity",description:"Analyze a Slack user's recent messaging activity and provide a summary by channel.",parameters:Vt,annotations:{},execute:async({count:r,user:e},{session:s})=>{let t=await G(r,s.context,e),o=`## User Activity Summary

`;return o+=`- **User:** ${t.userId}
`,o+=`- **Total Messages:** ${t.totalMessages}
`,o+=`- **Time Period:** ${t.timePeriod}

`,o+=`### Channel Breakdown

`,t.channelBreakdown.length===0?o+="No channel activity found.":(o+=`| Channel | Message Count | % of Total |
`,o+=`| ------- | ------------- | ---------- |
`,t.channelBreakdown.forEach(n=>{let a=(n.messageCount/t.totalMessages*100).toFixed(1);o+=`| ${n.channelName} | ${n.messageCount} | ${a}% |
`;})),o}};var Ht=z$1.object({query:z$1.string().describe("A search term to find Slack users. Can be a display name, username, or partial match."),limit:z$1.number().int().min(1).max(100).optional().default(20).describe("Maximum number of users to check for matches (1-100). Default is 20.")}),ot={name:"slack_user_search",description:"Search for Slack users by display name, real name, or username.",parameters:Ht,annotations:{},execute:async({query:r,limit:e},s)=>{let t=s.context||s.session?.context;if(!t)throw new Error("No context provided");if(!t.hasWorkspace)return "Error: No Slack workspace specified.";let o=t.workspace;t.debugLog?.(`Using workspace: ${o}`);let n=await k(o,t),a=r.trim().replace(/^@/,"");if(!a)return "Please provide a search term to find users.";t.debugLog?.(`Fetching users from Slack API with limit: ${e}`);let i;try{if(i=await n.users.list({limit:200}),t.debugLog?.(`API response received: ${i.ok?"success":"failure"}`),t.debugLog?.(`Members found: ${i.members?.length||0}`),!i.ok||!i.members)return `Failed to retrieve user list from Slack. Response: ${JSON.stringify(i)}`}catch(m){return t.debugLog?.(`API error: ${m}`),`Error calling Slack API: ${m}`}t.debugLog?.(`Filtering ${i.members.length} users for query: "${a}"`);let c=i.members.filter(m=>m.deleted||m.is_bot?false:m.profile?.display_name?.toLowerCase().includes(a.toLowerCase())||m.profile?.real_name?.toLowerCase().includes(a.toLowerCase())||m.name?.toLowerCase().includes(a.toLowerCase()));if(t.debugLog?.(`Found ${c.length} users matching "${a}"`),c.length===0)return `No users found matching "${r}".`;let l=c.map(m=>{let g=m.profile?.display_name||"",h=m.profile?.real_name||"",y=`@${m.name||""}`,w=g.includes(" ")?`from:"${g}"`:`from:${y}`;return {id:m.id,username:y,display_name:g,real_name:h,search_format:w}});l.sort((m,g)=>m.username.toLowerCase()===`@${a.toLowerCase()}`?-1:g.username.toLowerCase()===`@${a.toLowerCase()}`?1:m.display_name.toLowerCase()===a.toLowerCase()?-1:g.display_name.toLowerCase()===a.toLowerCase()?1:m.display_name.localeCompare(g.display_name));let d=l.slice(0,e),u=`## User Search Results for "${r}" (Top ${d.length})

`;return u+=`| User | Display Name | Search Format |
`,u+=`|------|-------------|---------------|
`,d.forEach(m=>{u+=`| ${m.username} | ${m.display_name||m.real_name} | \`${m.search_format}\` |
`;}),u+=`
*Found ${c.length} total matching users. Showing top ${d.length}.*
`,u+=`
To search for messages from these users, use the search format in the slack_search tool.`,u}};var Kt=z$1.object({user_id:z$1.string().describe('Slack user ID to get profile information for. Must start with "U" followed by alphanumeric characters.')}),nt={name:"slack_get_user_profile",description:"Fetch detailed profile information for a specific Slack user by their ID.",parameters:Kt,annotations:{},execute:async({user_id:r},e)=>{let s=e.context||e.session?.context;if(!s)throw new Error("No context provided");let t=await je(r,s),o=`## Slack User Profile: ${t.displayName}

`;if(o+=`### Basic Information
`,o+=`- **User ID:** \`${t.userId}\`
`,o+=`- **Username:** @${t.username}
`,o+=`- **Display Name:** ${t.displayName}
`,o+=`- **Real Name:** ${t.realName||"Not set"}
`,o+=`- **Job Title:** ${t.title||"Not set"}
`,o+=`- **Email:** ${t.email||"Not available"}
`,o+=`- **Phone:** ${t.phone||"Not set"}
`,o+=`
### Status
`,o+=`- **Current Status:** ${t.status.text?t.status.text:"No status set"} ${t.status.emoji||""}
`,t.status.expiration&&(o+=`- **Status Expiration:** ${t.status.expiration}
`),o+=`
### Account Information
`,o+=`- **Team ID:** ${t.teamId||"Unknown"}
`,o+=`- **Timezone:** ${t.timezone||"Unknown"} (${t.timezoneLabel||""})
`,o+=`- **Account Type:** ${t.isBot?"Bot":"User"}
`,t.isAdmin||t.isOwner){let n=[];t.isOwner&&n.push("Owner"),t.isAdmin&&n.push("Admin"),o+=`- **Roles:** ${n.join(", ")}
`;}if(t.isRestricted||t.isUltraRestricted){let n=[];t.isRestricted&&n.push("Restricted"),t.isUltraRestricted&&n.push("Ultra Restricted"),o+=`- **Restrictions:** ${n.join(", ")}
`;}return o+=`- **Last Updated:** ${t.updated||"Unknown"}
`,t.avatarUrl&&(o+=`
### Profile Image
`,o+=`![${t.displayName}'s profile picture](${t.avatarUrl})
`),o}};var pe=[Ke,Ze,Qe,Xe,et,tt,rt,ot,nt];function at(r){for(let e of pe)r.addTool(e);}function it(r,e){r.command("mcp").description("Start an MCP server with search and status capabilities").action(async()=>{if(!e.hasWorkspace){let o=await O();o?(e.workspace=o,e.lastWorkspaceUsed=true,e.debugLog(`Automatically using last workspace: ${o}`)):(console.error("Error: No workspace found. Please specify a workspace with --workspace."),console.error("Example: slack-tools mcp --workspace your-workspace"),process.exit(1));}let s=process.env.npm_package_version||"1.0.0",t=new FastMCP({name:"slack-tools-server",version:s,authenticate:async()=>({context:e})});at(t),t.start({transportType:"stdio"});});}function ct(r,e){r.command("create-reminder <text>").description("Create a new Slack reminder").option("-t, --time <time>",'When to remind (unix timestamp, ISO datetime, or relative time like "in 5 minutes")',"in 30 minutes").option("-u, --user <user>","User ID to create reminder for (defaults to current user)").action(async(s,t)=>{try{console.log(`Creating reminder: "${s}" at ${t.time}`),t.user&&console.log(`For user: ${t.user}`);let o=await Y(s,t.time,e,t.user);if(o.success){if(console.log("\u2705 Reminder created successfully!"),o.reminder){let n=new Date(parseInt((o.reminder.time||0).toString())*1e3).toLocaleString();console.log(`Text: ${o.reminder.text}`),console.log(`Time: ${n}`);}}else console.log("\u274C Failed to create reminder");}catch(o){console.error("Error:",o),process.exit(1);}});}function lt(r,e){r.command("thread <channel> <timestamp>").description("Get replies in a Slack thread").option("-l, --limit <number>","Maximum number of replies to fetch","20").action(async(s,t,o)=>{try{let n=parseInt(o.limit,10);console.log(`Fetching replies for thread in channel ${s} at timestamp ${t}`),console.log(`Limit: ${n} replies`);let a=await J(s,t,e,n);if(a.replies.length===0){console.log("No replies found in this thread.");return}console.log(`Found ${a.replies.length} replies:
`),a.replies.forEach((i,c)=>{let l=i.user||"unknown",d=l&&a.users[l]?a.users[l].displayName:l,u=i.ts?new Date(parseInt(i.ts)*1e3).toLocaleString():"unknown time";console.log(`Reply #${c+1}:`),console.log(`From: ${d}`),console.log(`Time: ${u}`),console.log(`Text: ${i.text||""}`),console.log();});}catch(n){console.error("Error:",n),process.exit(1);}});}function mt(r,e){r.command("activity").description("Get activity statistics for a Slack user across channels").option("-u, --user <user-id>","User ID to analyze (defaults to current user)").option("-c, --count <number>","Number of messages to analyze","100").action(async s=>{try{let t=parseInt(s.count,10);console.log("Analyzing user activity..."),s.user?console.log(`User: ${s.user}`):console.log("User: current user"),console.log(`Analyzing ${t} most recent messages`);let o=await G(t,e,s.user);if(console.log(`
-------------------------------------`),console.log(`User Activity Summary for ${o.userId}`),console.log("-------------------------------------"),console.log(`Total Messages: ${o.totalMessages}`),console.log(`Time Period: ${o.timePeriod}`),console.log(`
Channel Breakdown:`),console.log("-------------------------------------"),o.channelBreakdown.length===0)console.log("No channel activity found.");else {let n=Math.max(...o.channelBreakdown.map(a=>a.channelName.length),15);console.log("Channel".padEnd(n),"Messages".padStart(10),"Percentage".padStart(12)),console.log("-".repeat(n+24)),o.channelBreakdown.forEach(a=>{let i=(a.messageCount/o.totalMessages*100).toFixed(1);console.log(a.channelName.padEnd(n),a.messageCount.toString().padStart(10),`${i}%`.padStart(12));});}console.log("-------------------------------------");}catch(t){console.error("Error:",t),process.exit(1);}});}function er(r){if(r instanceof ZodObject){let e=r.shape,s=Object.entries(e).map(([t,o])=>{let n=o.description?` (${o.description})`:"",a=o.constructor.name.replace("Zod",""),i=o.isOptional();return `    - ${t}${i?"?":""}: ${a}${n}`});return s.length===0?"  (No parameters)":`  Parameters:
${s.join(`
`)}`}return "  (Parameters schema is not an object)"}function ut(r,e){r.command("call-tool").description("Directly call an MCP tool by name with JSON arguments, or list available tools.").argument("[tool-name]","Optional name of the MCP tool to call (e.g., slack_get_status)").option("--args <json_string>","JSON string containing the arguments for the tool (if calling a specific tool)","{}").action(async(s,t)=>{e.debugLog(`call-tool invoked. Tool name: ${s??"None provided"}, Args option: ${t.args}`);let o=process.env.npm_package_version||"1.0.0",n=new FastMCP({name:"temp-tool-runner",version:o}),a=new Map;for(let m of pe)a.set(m.name,m);if(e.debugLog(`Loaded ${a.size} tools from registry.`),!s){if(console.log(`Available MCP Tools:
`),a.size===0){console.log("No tools found.");return}Array.from(a.keys()).sort().forEach(g=>{let h=a.get(g);console.log(`Tool: ${h.name}`),console.log(`  Description: ${h.description||"No description provided."}`),console.log(er(h.parameters)),console.log("---");});return}e.debugLog(`Proceeding to call specific tool: ${s}`);let i=a.get(s);i||(console.error(`Error: Tool "${s}" not found.`),console.error(`Available tools: ${Array.from(a.keys()).sort().join(", ")}`),process.exit(1)),e.debugLog(`Found tool definition for "${s}"`);let c;try{c=JSON.parse(t.args),e.debugLog(`Parsed arguments: ${JSON.stringify(c)}`);}catch(m){console.error(`Error: Invalid JSON provided for --args: ${m instanceof Error?m.message:String(m)}`),console.error(`Please provide a valid JSON string, e.g., '{"text":"hello"}'`),process.exit(1);}let d=i.parameters.safeParse(c);d.success||(console.error(`Error: Invalid arguments for tool "${s}":`),d.error.errors.forEach(m=>{console.error(`  - Argument '${m.path.join(".")}': ${m.message}`);}),console.error(`Provided args: ${t.args}`),process.exit(1)),e.debugLog(`Arguments validated successfully for tool "${s}".`);let u=d.data;try{e.debugLog(`Executing tool "${s}"...`);let m=await i.execute(u,{server:n,session:{context:e},context:e});e.debugLog(`Tool "${s}" executed successfully.`),console.log(m);}catch(m){console.error(`Error executing tool "${s}": ${m instanceof Error?m.message:String(m)}`),e.debugLog(`Execution error details: ${m}`),process.exit(1);}});}function dt(r,e){we(r),ve(r,e),Oe(r,e),Be(r,e),Je(r,e),He(r,e),it(r,e),ct(r,e),lt(r,e),mt(r,e),ut(r,e);}var ee=class{_workspace;_lastWorkspaceUsed=false;_debug=false;_logger;set workspace(e){this._workspace=e;}get workspace(){return this._workspace||(console.error("Error: No workspace specified. Please specify a workspace using:"),console.error("  - Use -w, --workspace <workspace> to specify a workspace directly"),console.error("  - Use -l, --last-workspace to use your most recently used workspace"),process.exit(1)),this._workspace}get hasWorkspace(){return !!this._workspace}set lastWorkspaceUsed(e){this._lastWorkspaceUsed=e;}get lastWorkspaceUsed(){return this._lastWorkspaceUsed}set debug(e){this._debug=e;}get debug(){return this._debug}setLogger(e){this._logger=e;}debugLog(e,...s){this._debug&&(this._logger?this._logger(e,...s):s.length>0?process.stderr.write(`[DEBUG] ${e} ${s.map(t=>typeof t=="object"?JSON.stringify(t):String(t)).join(" ")}
`):process.stderr.write(`[DEBUG] ${typeof e=="object"?JSON.stringify(e):e}
`));}};var ar=fileURLToPath(import.meta.url),ir=dirname(ar),cr=JSON.parse(readFileSync(join(ir,"../package.json"),"utf8")),te=new Command;te.name("slack-tools-mcp").description("CLI for extracting Slack tokens and cookies and making API calls with MCP support").version(cr.version).option("-w, --workspace <workspace>","Specify Slack workspace URL or name").option("-l, --last-workspace","Use the last used workspace").option("-d, --debug","Enable debug mode for detailed logging");var S=new ee;dt(te,S);te.hook("preAction",async r=>{let e=r.opts();if(e.debug&&(S.debug=true,S.debugLog("Debug mode enabled")),e.workspace)S.workspace=e.workspace,S.debugLog(`Using workspace: ${e.workspace}`),await Ie(e.workspace);else if(e.lastWorkspace){let s=await O();s?(S.workspace=s,S.lastWorkspaceUsed=true,S.debugLog(`Using last workspace: ${s}`)):(console.error("No last workspace found. Please specify a workspace using --workspace."),S.debugLog("No last workspace found in cache"));}});te.parse(process.argv);//# sourceMappingURL=cli.mjs.map
//# sourceMappingURL=cli.mjs.map