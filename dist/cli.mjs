#!/usr/bin/env node
import {Command}from'commander';import {readFileSync,promises,existsSync as existsSync$1}from'fs';import {join,dirname}from'path';import {fileURLToPath}from'url';import D from'keytar';import {WebClient,LogLevel}from'@slack/web-api';import {join as join$1}from'node:path';import {platform,homedir as homedir$1}from'node:os';import {promisify}from'node:util';import {exec}from'child_process';import ye from'sqlite3';import {open}from'sqlite';import Se from'crypto';import {Level}from'level';import {existsSync}from'node:fs';import {FastMCP}from'fastmcp';import {z as z$1}from'zod';import {homedir}from'os';var E="slack-tools",pe="slack-cookie";async function ge(t){for(let[e,r]of Object.entries(t.tokens))await D.setPassword(E,e,JSON.stringify(r));t.cookie&&await D.setPassword(E,pe,JSON.stringify(t.cookie));}async function A(){try{let t=await D.findCredentials(E);if(t.length===0)return null;let e={},r=null;for(let o of t)if(o.account===pe)try{r=JSON.parse(o.password);}catch(s){console.error("Failed to parse cookie from keychain:",s);}else try{let s=JSON.parse(o.password);e[o.account]=s;}catch(s){console.error(`Failed to parse token for ${o.account}:`,s);}return Object.keys(e).length===0||!r?null:{tokens:e,cookie:r}}catch(t){return console.error("Failed to read auth from keychain:",t),null}}async function U(){let t=await D.findCredentials(E);for(let e of t)await D.deletePassword(E,e.account);}function he(t){t.command("clear").description("Clear stored authentication from keychain").action(async()=>{try{console.error("Clearing stored authentication from keychain..."),await U(),console.error("Authentication cleared successfully.");}catch(e){console.error("Error:",e),process.exit(1);}});}var m={workspace:"",debug:false,get hasWorkspace(){return this.workspace!==""},log:{...console,debug:(...t)=>{m.debug&&console.debug(...t);},warn:(...t)=>console.warn(...t),info:(...t)=>console.info(...t),error:(...t)=>console.error(...t)}};var at=promisify(exec);function be(t,e){try{let r=t.slice(0,3).toString(),o;if(r==="v10"||r==="v11")o=t.slice(3);else throw new Error("Unsupported cookie version");let s=Buffer.from(" ".repeat(16)),n=Se.createDecipheriv("aes-128-cbc",e,s),c=Buffer.concat([n.update(o),n.final()]),i=c.length;for(;i>0&&c[i-1]===0;)i--;let a=c.slice(0,i).toString("utf8");return m.log.debug(`Decrypted cookie value: ${a}`),a}catch(r){throw new Error(`Failed to decrypt cookie value: ${r instanceof Error?r.message:String(r)}`)}}async function it(){try{let{stdout:t}=await at('security find-generic-password -wa "Slack App Store Key"'),e=t.trim(),r=Buffer.from("saltysalt"),o=16,s=1003;return m.log.debug("Found encryption key"),Se.pbkdf2Sync(e,r,s,o,"sha1")}catch(t){throw new Error(`Could not retrieve Slack encryption key from keychain: ${t instanceof Error?t.message:String(t)}`)}}function ct(){let t=[join$1(homedir$1(),"Library/Application Support/Slack/Cookies"),join$1(homedir$1(),"Library/Containers/com.tinyspeck.slackmacgap/Data/Library/Application Support/Slack/Cookies")];for(let e of t)if(existsSync$1(e))return m.log.debug(`Using cookies database path: ${e}`),e;throw new Error("Could not find Slack's cookies database")}async function O(){try{let t=ct(),e=await it(),r=await open({filename:t,driver:ye.Database,mode:ye.OPEN_READONLY});try{let o=await r.all('SELECT name, encrypted_value FROM cookies WHERE name = "d" ORDER BY LENGTH(encrypted_value) DESC');if(!o||o.length===0||!o[0].encrypted_value)throw new Error('Could not find any Slack "d" cookies in cookies database');if(o.length>1){let i=new Set,a=[];for(let l of o)try{let u=be(l.encrypted_value,e),d=u.indexOf("xoxd-");if(d!==-1){let g=u.substring(d);i.add(g),a.push({...l,decryptedValue:g});}}catch{}if(i.size>1)throw new Error(`Found ${i.size} different Slack tokens in cookies. Please clear unused cookies.`)}let s=o[0];m.log.debug("Found d= cookie");let n=be(s.encrypted_value,e),c=n.indexOf("xoxd-");if(c!==-1){let i=n.substring(c);return m.log.debug("Found xoxd- cookie"),{name:s.name,value:i}}if(!n.startsWith("xoxd-"))throw new Error("Decrypted cookie value does not have the required xoxd- prefix");return {name:s.name,value:n}}finally{await r.close();}}catch(t){throw new Error(`Failed to extract Slack cookie: ${t instanceof Error?t.message:String(t)}`)}}function dt(){if(platform()!=="darwin")throw new Error("slacktokens only works on macOS or Linux.");let t=[join$1(homedir$1(),"Library/Containers/com.tinyspeck.slackmacgap/Data/Library/Application Support/Slack/Local Storage/leveldb"),join$1(homedir$1(),"Library/Application Support/Slack/Local Storage/leveldb")];for(let e of t)if(existsSync(e))return m.log.debug(`Found leveldb path: ${e}`),e;throw new Error("Could not find Slack's Local Storage directory")}async function j(t){let e=dt(),r=new Level(e,{createIfMissing:false});try{await r.open();let s=(await r.iterator().all()).filter(([i])=>i.toString().includes("localConfig_v2")).map(([i,a])=>a.toString());if(m.log.debug(`Found ${s.length} localConfig_v2 values`,s.map(i=>i.slice(0,10))),s.length===0)throw new Error("Slack's Local Storage not recognised: localConfig not found");if(s.length>1)throw new Error("Slack has multiple localConfig_v2 values");let n=JSON.parse(s[0].slice(1)),c={};for(let i of Object.values(n.teams))c[i.url]={token:i.token,name:i.name};return c}catch(o){if(console.error("Error:",o),o&&typeof o=="object"&&"code"in o){let s=o;if(s.code==="LEVEL_DATABASE_NOT_OPEN"&&s.cause?.code==="LEVEL_LOCKED")throw new Error(`Slack's Local Storage database is locked. Please make sure Slack is completely closed:
1. Quit Slack from the menu bar
2. Check Activity Monitor/Task Manager to ensure no Slack processes are running
3. Try running this command again`)}throw o}finally{t?.debug&&t.log.debug("Closing database"),r.status==="open"&&await r.close();}}var oe,xe=false;function Me(t,e,r){return new WebClient(t,{headers:{Cookie:`d=${e.value}`},rejectRateLimitedCalls:true,logger:{...r.log,setLevel:()=>{},getLevel:()=>r.debug?LogLevel.DEBUG:LogLevel.ERROR,setName:()=>{}}})}async function ve(t,e){let r=Object.values(t.tokens)[0]?.token;if(!r)throw new Error("Auth test failed: No token found");try{let s=await Me(r,t.cookie,e).auth.test();if(!s.ok)throw new Error("Auth test failed: API returned not ok");oe=s,xe=!0;}catch(o){throw console.error("Auth test API call failed:",o),new Error("Auth test failed: API call error")}}async function re(t){let e={cookie:await O(),tokens:await j(t)};return await ve(e,t),await ge(e),e}async function pt(t){let e=await A();if(e?.cookie&&e?.tokens)try{return await ve(e,t),e}catch(r){return console.error("Auth error encountered, clearing stored credentials and retrying...",r),await U(),await re(t)}else return await re(t)}function se(t,e,r){if(!t.cookie)throw new Error("No cookie found in auth");if(r.log.debug("Available workspaces:",Object.keys(t.tokens).join(", ")),r.log.debug("Looking for workspace:",e),t.tokens[e]){let s=t.tokens[e].token;return r.log.debug(`Found token for workspace URL: ${e}`),r.log.debug(`Token: ${s.substring(0,5)}...${s.substring(s.length-5)}`),{token:s,workspaceUrl:e,cookie:t.cookie}}let o=Object.entries(t.tokens).find(([,s])=>s.name.toLowerCase()===e.toLowerCase());if(o){let s=o[1].token;return r.log.debug(`Found token for workspace name: ${o[1].name}`),r.log.debug(`Workspace URL: ${o[0]}`),r.log.debug(`Token: ${s.substring(0,5)}...${s.substring(s.length-5)}`),{token:s,workspaceUrl:o[0],cookie:t.cookie}}throw r.log.debug("All available workspaces:"),Object.entries(t.tokens).forEach(([s,n])=>{r.log.debug(`- ${n.name} (${s})`);}),new Error(`Could not find workspace "${e}". Use 'slack-tools print' to see available workspaces.`)}async function w(t=m){let e=xe?await A()||await re(t):await pt(t);t.workspace||(console.error("Error: No workspace specified. Please specify a workspace using:"),console.error("  - Use -w, --workspace <workspace> to specify a workspace directly"),console.error("  - Use -l, --last-workspace to use your most recently used workspace"),process.exit(1));let{token:r,cookie:o,workspaceUrl:s}=se(e,t.workspace,t);if(t.log.debug(`Using workspace: ${s}`),!r.startsWith("xoxc-"))throw new Error(`Invalid token format: token should start with 'xoxc-'. Got: ${r}`);return Me(r,o,t)}function _e(t){t.command("print").description("Print tokens and cookie").option("-q, --quiet","Suppress output and only show tokens/cookies").action(async e=>{try{let r=await A();!e.quiet&&!r&&console.log("No stored auth found, fetching fresh credentials...");let o=r||{cookie:await O(),tokens:await j(m)},{token:s,cookie:n,workspaceUrl:c}=se(o,m.workspace||Object.keys(o.tokens)[0],m);e.quiet?(console.log(s),console.log(n.value)):(console.log(`
Found token for workspace:
`),console.log(`Workspace URL: ${c}`),console.log(`Token: ${s}
`),console.log("Found cookie:"),console.log(`${n.name}: ${n.value}
`));}catch(r){console.error("Error:",r),process.exit(1);}});}function De(t){t.command("test").description("Test authentication with Slack API").action(async e=>{try{console.log("Testing auth for workspace:",m.workspace);let r=await w(m);console.log("Calling auth.test API endpoint");let o=await r.auth.test();console.log("Full API response:",o),console.log(`
API Response:`),console.log(JSON.stringify(o,null,2));}catch(r){console.error("Error:",r),m.debug||console.log(`
Tip: Run with -d/--debug flag for more troubleshooting information`),process.exit(1);}});}var ne="1.0.3";async function Ee(t){let e;if(t.since){if(e=new Date(t.since),isNaN(e.getTime()))throw new Error(`Invalid start date: ${t.since}, use YYYY-MM-DD format`)}else {let o=new Date;e=new Date(o),e.setHours(0,0,0,0),m.log.debug(`Using start date: ${e.toISOString()}`);}let r;if(t.until){if(r=new Date(t.until),isNaN(r.getTime()))throw new Error(`Invalid end date: ${t.until}, use YYYY-MM-DD format`);r.setHours(23,59,59,999);}else {let o=new Date;r=new Date(o),r.setHours(23,59,59,999),m.log.debug(`Using end date: ${r.toISOString()}`);}return {startTime:e,endTime:r}}function ae(t){return t.toISOString().split("T")[0]}function Ae(t){let e=new Date(t);return e.setDate(e.getDate()-1),e}function Ne(t){let e=new Date(t);return e.setDate(e.getDate()+1),e}async function ht(t,e){if(e.match(/^<@.*>$/))return e;let r=e.replace(/^@/,"").replace(/^"(.*)"$/,"$1");if(/^U[A-Z0-9]{8,}$/.test(r))return `<@${r}>`;if(/.+@.+\..+/.test(r)){let o=await t.users.lookupByEmail({email:r});if(o.ok&&o.user)return `<@${o.user.id}>`}try{let o=await t.users.list({});if(o.ok&&o.members){let s=o.members.find(a=>a.name?.toLowerCase()===r.toLowerCase());if(s)return `<@${s.id}>`;let n=o.members.find(a=>a.profile?.display_name?.toLowerCase()===r.toLowerCase());if(n)return `<@${n.id}>`;let c=o.members.find(a=>a.profile?.real_name?.toLowerCase()===r.toLowerCase());if(c)return `<@${c.id}>`;let i=o.members.filter(a=>a.name?.toLowerCase().includes(r.toLowerCase())||a.profile?.display_name?.toLowerCase().includes(r.toLowerCase())||a.profile?.real_name?.toLowerCase().includes(r.toLowerCase()));if(i.length>0)return i.length>1&&m.log.debug(`Multiple users found matching "${r}". Using first match: ${i[0].profile?.display_name||i[0].name}`),`<@${i[0].id}>`;m.log.debug(`No user found matching "${r}". Using as-is.`);}}catch(o){m.log.debug(`Error resolving user "${r}": ${o}`);}return m.log.warn(`No user found matching "${r}". Using as-is.`),`${r}`}async function Pe(t,e){let r=/(from:|to:|with:)@?(("([^"]+)")|([^\s]+))/g,o=Array.from(e.matchAll(r));if(o.length===0)return e;let s=e;for(let n of o){let[c,i,a,l,u,d]=n,h=await ht(t,u||d),k=`${i}${h}`;s=s.replace(c,k);}return m.log.debug(`Enhanced query: "${s}"`),s}async function Re(t,e,r,o,s){if(!e)throw new Error("Username is required for searching messages");let n=Ae(r.startTime),c=Ne(r.endTime),i=ae(n),a=ae(c),l=`from:${e} after:${i} before:${a}`;s.log.debug(`Search query: ${l}`);let u=await M(t,l,o,s),d=`is:thread with:@${e} after:${i} before:${a}`;s.log.debug(`Thread query: ${d}`);let g=await M(t,d,o,s),h=`to:${e} after:${i} before:${a}`;s.log.debug(`Mention query: ${h}`);let k=await M(t,h,o,s);return {messages:u,threadMessages:g,mentionMessages:k}}async function M(t,e,r,o=m){o.log.debug(`Original search query: ${e}`);let s=await Pe(t,e);o.log.debug(`Executing search with enhanced query: ${s}`);try{return (await t.search.messages({query:s,sort:"timestamp",sort_dir:"asc",count:r})).messages?.matches||[]}catch(n){throw o.log.debug(`Search error: ${n}`),new Error(`Failed to search Slack: ${n}`)}}var le=join(homedir(),".slack-tools"),Le=join(le,"config.json"),Ue=join(le,"slack-cache.json"),wt=24*60*60*1e3,ie={lastWorkspace:null};async function I(){try{await promises.mkdir(le,{recursive:!0});}catch(t){throw console.error("Failed to create config directory:",t),new Error(`Could not create cache directory: ${t.message}`)}}async function Oe(){await I();try{let t=await promises.readFile(Le,"utf8");return {...ie,...JSON.parse(t)}}catch(t){return t.code==="ENOENT"||console.error("Failed to load config:",t),ie}}async function yt(t){await I();try{await promises.writeFile(Le,JSON.stringify(t,null,2));}catch(e){throw console.error("Failed to save config:",e),new Error(`Could not save cache configuration: ${e.message}`)}}async function je(){return (await Oe()).lastWorkspace}async function Ie(t){let e=await Oe();e.lastWorkspace=t,await yt(e);}async function Fe(t=Ue,e=wt){try{await I();let r=await promises.readFile(t,"utf-8"),o=JSON.parse(r);if(Date.now()-o.lastUpdated<e)return o}catch{}return null}async function v(t,e=Ue){await I(),await promises.writeFile(e,JSON.stringify(t,null,2));}function bt(t){let e=new Set,r=new Set;for(let o of t){o.user&&e.add(o.user),o.channel?.id&&r.add(o.channel.id);let s=/<@([A-Z0-9]+)>/g,n=o.text?.match(s)||[];for(let a of n){let l=a.slice(2,-1);e.add(l);}let c=/<#([A-Z0-9]+)(\|[^>]+)?>/g,i=(o.text||"").match(c)||[];for(let a of i){let l=a.slice(2).split("|")[0];r.add(l);}}return {userIds:e,channelIds:r}}async function St(t,e,r,o,s){for(let n of e)try{let c=await t.users.info({user:n});c.ok&&c.user&&(r.users[n]={displayName:c.user.real_name||c.user.name||n,isBot:!!c.user.is_bot||(c.user.name||"").includes("bot")},s&&o.log.debug(`Added missing user to cache: ${r.users[n].displayName}`));}catch(c){o.log.debug(`Could not fetch info for user ${n}:`,c);}}async function Ct(t,e,r,o,s){if(!r.users[e])try{let n=await t.users.info({user:e});n.ok&&n.user&&(r.users[e]={displayName:n.user.real_name||n.user.name||e,isBot:!!n.user.is_bot||(n.user.name||"").includes("bot")},s&&o.log.debug(`Added missing DM user to cache: ${r.users[e].displayName}`));}catch(n){o.log.debug(`Could not fetch info for DM user ${e}:`,n);}}async function $t(t,e,r){try{return (await t.conversations.members({channel:e})).members||[]}catch(o){r.log.debug(`Could not fetch members for channel ${e}:`,o);return}}async function Tt(t,e,r,o,s,n){for(let c of e)try{let i=await t.conversations.info({channel:c});if(i.ok&&i.channel){let a=i.channel,l=a.name||c,u;if(a.is_im){let d="user"in a?a.user:void 0;d&&(n.add(d),await Ct(t,d,r,o,s),u=[d]);}else a.is_mpim&&(u=await $t(t,c,o));r.channels[c]={displayName:l,type:a.is_im?"im":a.is_mpim?"mpim":"channel",members:u},s&&o.log.debug(`Added missing channel to cache: ${l}`);}}catch(i){o.log.debug(`Could not fetch info for channel ${c}:`,i);}}async function xt(){return await Fe()||{users:{},channels:{},lastUpdated:0}}async function _(t,e,r=m){let o=await xt(),s=o.lastUpdated>0,{userIds:n,channelIds:c}=bt(e),i=Array.from(n).filter(l=>!o.users[l]),a=Array.from(c).filter(l=>!o.channels[l]);return s?(r.log.debug("Using cached user and channel information with updates for missing entries"),r.log.debug(`Found ${i.length} users and ${a.length} channels missing from cache`)):r.log.debug("No cache found, fetching all user and channel information"),await St(t,i,o,r,s),await Tt(t,a,o,r,s,n),o.lastUpdated=Date.now(),await v(o),o}function S(t,e,r){let o=e.channels[t];if(!o)return t;if(o.type==="channel")return `#${o.displayName}`;if(o.type==="im"&&o.members&&o.members.length>0){let s=o.members[0],n=e.users[s];return `DM with ${n?n.displayName:o.displayName}`}return o.type==="mpim"&&o.members?`Group DM with ${o.members.filter(n=>n!==r).map(n=>e.users[n]?.displayName||n).join(", ")}`:t}function W(t,e){return t?(t=t.replace(/<@([A-Z0-9]+)(?:\|([^>]+))?>/g,(r,o,s)=>{let n=e.users[o];return n?`@${n.displayName}`:s?`@${s}`:r}),t=t.replace(/<#([A-Z0-9]+)(?:\|([^>]+))?>/g,(r,o,s)=>{if(s)return `#${s}`;let n=e.channels[o];return n?`#${n.displayName}`:r}),t=t.replace(/<((?:https?:\/\/)[^|>]+)\|([^>]+)>/g,"[$2]($1)"),t=t.replace(/<((?:https?:\/\/)[^>]+)>/g,"$1"),t.split(`
`).join(`
    `)):""}function B(t){let e=t.getHours().toString().padStart(2,"0"),r=t.getMinutes().toString().padStart(2,"0");return `${e}:${r}`}function Mt(t){return typeof t.ts=="string"}function vt(t){if(t)try{return new URL(t).searchParams.get("thread_ts")||void 0}catch{return}}function _t(t,e,r,o,s){let n=e.some(i=>{let a=i.user===o,l=i.threadMessages?.some(u=>u.user===o)??false;return a||l}),c=r.channels[t];if(!c)return  true;if(c.type==="im"){let a=r.users[c.members?.[0]||""]?.isBot||false,l=n||!a;return l||s.log.debug(`Filtering out bot channel: ${S(t,r,o)}`),l}return  true}function Dt(t,e){let r=new Map,o=[];for(let s of t){if(!Mt(s)){e.log.debug("Skipping message without timestamp");continue}let n=s.thread_ts||vt(s.permalink),c,i=false;if(s.permalink){if(s.permalink.includes("thread_ts="))c=s.permalink,i=s.permalink.includes(`thread_ts=${s.ts}`);else if(n)try{let a=new URL(s.permalink);a.searchParams.set("thread_ts",n),c=a.toString();}catch{c=s.permalink;}}if(n&&s.ts!==n){r.has(n)||r.set(n,[]);let a=r.get(n);if(!a.some(l=>l.ts===s.ts)){let l={...s,thread_ts:n,threadPermalink:c,hasReplies:false};a.push(l),e.log.debug(`Added message to thread: ${s.text?.slice(0,50)}`);}}else {let a={...s,threadPermalink:c,hasReplies:i};o.push(a),e.log.debug(`Added standalone/parent message: ${s.ts} ${n} ${s.text?.slice(0,50)}`);}}return {threadMap:r,standaloneMessages:o}}function F(t,e=[],r,o){let n=new Date(Number(t.ts)*1e3).toISOString().split("T")[0],c=t.channel?.id||"unknown";r.has(n)||r.set(n,new Map);let i=r.get(n);i.has(c)||i.set(c,[]);let a=i.get(c);e.length>0&&o.log.debug(`Adding message with ${e.length} thread replies to ${c}`),a.push({...t,threadMessages:e});}function Et(t,e,r){let o=new Map;for(let s of t)if(s.ts&&e.has(s.ts)){let c=e.get(s.ts).filter(a=>a.ts!==s.ts),i={...s,hasReplies:c.length>0,threadPermalink:s.threadPermalink||s.permalink};F(i,c,o,r);}else F({...s,hasReplies:false},[],o,r);for(let[s,n]of e.entries()){if(t.some(a=>a.ts===s))continue;let c=n.sort((a,l)=>Number(a.ts)-Number(l.ts)),i=c.find(a=>a.ts===s);if(i){let a=c.filter(u=>u.ts!==i.ts),l={...i,hasReplies:a.length>0,threadPermalink:i.threadPermalink||i.permalink};F(l,a,o,r);}else {let a=c[0];r.log.debug(`Thread ${s} missing parent, using first reply as parent`);let l=c.find(g=>g.threadPermalink)?.threadPermalink||a.permalink,u={...a,thread_ts:s,ts:s,text:a.text,user:a.user,channel:a.channel,hasReplies:true,threadPermalink:l},d=c.filter(g=>g.ts!==a.ts);F(u,d,o,r);}}return o}function At(t,e,r){let o="",s=new Date(Number(t.ts)*1e3),n=B(s),c=t.username||"Unknown User";t.user&&e.users[t.user]&&(c=e.users[t.user].displayName),r.log.debug(`Formatting message from ${c}`);let i="";t.hasReplies&&(t.thread_ts===t.ts||t.permalink?.includes(`thread_ts=${t.ts}`)?i=` [\u{1F4AC} Start of Thread](${t.threadPermalink||t.permalink||""})`:i=` [\u{1F4AC} Part of Thread](${t.threadPermalink||t.permalink||""})`),o+=`- [*${n}*](${t.permalink||""}) **${c}**${i}: `;let l=W(t.text||"",e).split(`
`);if(o+=l[0]+`
`,l.length>1){let u="    ";o+=l.slice(1).map(d=>`${u}${d}`).join(`
`)+`
`;}return o}function Nt(t,e){let r="",o=t.sort((s,n)=>Number(s.ts)-Number(n.ts));for(let s of o){let n=new Date(Number(s.ts)*1e3),c=B(n),i=s.username||"Unknown User";s.user&&e.users[s.user]&&(i=e.users[s.user].displayName),r+="        - ",s.permalink?r+=`[*${c}*](${s.permalink})`:r+=`*${c}*`;let l=W(s.text||"",e).split(`
`);if(r+=` **${i}**: ${l[0]}
`,l.length>1){let u="            ";r+=l.slice(1).map(d=>`${u}${d}`).join(`
`)+`
`;}}return r}function We(t,e,r,o){let s="";o.log.debug(`Processing ${t.length} total messages`);let{threadMap:n,standaloneMessages:c}=Dt(t,o),i=Et(c,n,o),a=Array.from(i.keys()).sort();for(let l of a){let u=new Date(l);s+=`# ${u.toDateString()}

`;let d=i.get(l),g=Array.from(d.entries()).map(([h,k])=>[h||"unknown",k]).filter(([h,k])=>_t(h,k,e,r,o)).sort(([h],[k])=>{let T=S(h,e,r),C=S(k,e,r);return T.localeCompare(C)});for(let[h,k]of g){let T=S(h,e,r);s+=`## ${T}

`;let C=k.sort((b,x)=>Number(b.ts)-Number(x.ts));for(let b of C)s+=At(b,e,o),b.threadMessages?.length&&(o.log.debug(`Adding ${b.threadMessages.length} thread replies for message: ${b.text?.slice(0,50)}`),s+=Nt(b.threadMessages,e),s+=`
`);s+=`
`;}}return s}async function Be(t,e){let r=await Ee(t),o=await w(),s=oe?.user_id;e.log.debug(`Generating my messages summary for user: ${s}`),e.log.debug(`Date range: ${r.startTime.toLocaleDateString()} to ${r.endTime.toLocaleDateString()}`);let{messages:n,threadMessages:c,mentionMessages:i}=await Re(o,`<@${s}>`,r,t.count,e),a=[...n,...c,...i];e.log.debug(`Found ${n.length} direct messages, ${c.length} thread messages, and ${i.length} mention messages`),e.log.debug(`Found ${a.length} total messages. Fetching details...`);let l=await _(o,a,e);e.log.debug("Formatting report...");let u=We(a,l,s,e);return l.lastUpdated=Date.now(),await v(l),{markdown:u,allMessages:a,userId:s,dateRange:r,cache:l}}var Pt=z$1.object({username:z$1.string().optional().describe("Username or display name to fetch messages for. If omitted, fetches messages for the current user."),since:z$1.string().optional().describe('Start date in YYYY-MM-DD format (e.g., "2023-01-15"). If omitted, defaults to the beginning of the current day.'),until:z$1.string().optional().describe('End date in YYYY-MM-DD format (e.g., "2023-01-15"). If omitted, defaults to the end of the current day.'),count:z$1.number().int().default(200).describe("Maximum number of messages to retrieve (1-1000). Default is 200.")}),G={name:"slack_my_messages",description:"Fetch and summarize messages sent by the user in Slack within a given time range.",parameters:Pt,annotations:{},execute:async({since:t,until:e,count:r})=>(await Be({since:t,until:e,count:r},m)).markdown};async function Ge(t,e){try{let r=await w(),s=(await r.auth.test()).user_id;m.log.debug(`Searching messages with query: ${t}`);let n=await M(r,t,e);m.log.debug(`Found ${n.length} matching messages. Fetching details...`);let c=await _(r,n);return c.lastUpdated=Date.now(),await v(c),{messages:n,userId:s,channels:c.channels,users:c.users}}catch(r){throw new Error(`Search failed: ${r}`)}}function Rt(t){if(!t)return "";let e=t;return e.startsWith(":")||(e=`:${e}:`),e.endsWith(":")||(e=`${e}:`),e}function Lt(t){return t?Math.floor(Date.now()/1e3)+t*60:0}async function ze(t,e,r){try{m.log.debug("Setting status for workspace:",m.workspace);let o=Rt(e||"");o&&m.log.debug("Using emoji:",o);let s=Lt(r);r?m.log.debug("Status will expire in",r,"minutes at",new Date(s*1e3).toISOString()):m.log.debug("Setting permanent status (no expiration)");let c=await(await w()).users.profile.set({profile:{status_text:t,status_emoji:o,status_expiration:s}});return m.log.debug("API response:",c),{success:!0,text:t,emoji:o,expirationTime:s?new Date(s*1e3).toISOString():null}}catch(o){throw new Error(`Status update failed: ${o}`)}}async function Ze(){try{let e=await(await w()).users.profile.get({});return {status:e.profile?.status_text||"",emoji:e.profile?.status_emoji||"",expirationTime:e.profile?.status_expiration?new Date(Number(e.profile.status_expiration)*1e3).toISOString():null}}catch(t){throw new Error(`Status retrieval failed: ${t}`)}}async function qe(t,e,r){try{m.log.debug("Creating reminder for workspace:",m.workspace),m.log.debug("Reminder text:",t),m.log.debug("Reminder time:",e),r&&m.log.debug("Reminder for user:",r);let s=await(await w()).reminders.add({text:t,time:e,user:r});return m.log.debug("API response:",s),{success:!0,reminder:s.reminder}}catch(o){throw new Error(`Reminder creation failed: ${o}`)}}async function Ye(t,e,r){try{m.log.debug("Getting thread replies in workspace:",m.workspace),m.log.debug("Channel:",t),m.log.debug("Thread timestamp:",e),r&&m.log.debug("Limit:",r);let o=await w(),n=(await o.conversations.replies({channel:t,ts:e,limit:r})).messages?.filter(a=>a.ts!==e)||[];m.log.debug("Found replies:",n.length);let c=n.map(a=>({iid:a.ts,ts:a.ts,text:a.text,user:a.user,channel:{id:t},team:a.team})),i=await _(o,c);return {replies:n,channels:i.channels,users:i.users}}catch(o){throw new Error(`Getting thread replies failed: ${o}`)}}async function Je(t,e){try{m.log.debug("Getting user activity for workspace:",m.workspace),e&&m.log.debug("User:",e);let r=await w(),o=e;o||(o=(await r.auth.test()).user_id,m.log.debug("Using current user ID:",o));let s=`from:<@${o}>`,n=await M(r,s,t);m.log.debug(`Found ${n.length} messages for user`);let c=await _(r,n),i={};n.forEach(l=>{let u=l.channel?.id||"unknown";i[u]=(i[u]||0)+1;});let a=Object.entries(i).map(([l,u])=>({channelId:l,channelName:c.channels[l]?.displayName||"Unknown channel",messageCount:u}));return a.sort((l,u)=>u.messageCount-l.messageCount),{userId:o,totalMessages:n.length,channelBreakdown:a,timePeriod:`Last ${t} messages`}}catch(r){throw new Error(`Getting user activity failed: ${r}`)}}async function Ke(t){try{let e=await w(),r=await e.users.info({user:t});if(!r.ok||!r.user)throw new Error(`User not found: ${t}`);let o=await e.users.profile.get({user:t});if(!o.ok||!o.profile)throw new Error(`Profile not found for user: ${t}`);return {userId:t,username:r.user.name,realName:r.user.real_name,displayName:o.profile.display_name||r.user.real_name||r.user.name,email:o.profile.email,phone:o.profile.phone,title:o.profile.title,teamId:r.user.team_id,timezone:r.user.tz,timezoneLabel:r.user.tz_label,avatarUrl:o.profile.image_original||o.profile.image_512,status:{text:o.profile.status_text||"",emoji:o.profile.status_emoji||"",expiration:o.profile.status_expiration?new Date(Number(o.profile.status_expiration)*1e3).toISOString():null},isBot:r.user.is_bot||!1,isAdmin:r.user.is_admin||!1,isOwner:r.user.is_owner||!1,isRestricted:r.user.is_restricted||!1,isUltraRestricted:r.user.is_ultra_restricted||!1,updated:r.user.updated?new Date(Number(r.user.updated)*1e3).toISOString():null}}catch(e){throw new Error(`User profile retrieval failed: ${e}`)}}function He(t,e,r,o){let s="";if(t.length===0)return o.log.debug("No search results found"),`# Search Results

No messages found matching your search criteria.
`;o.log.debug(`Processing ${t.length} search results`);let n=new Map;for(let i of t){let a=i.channel?.id||"unknown";n.has(a)||n.set(a,[]),n.get(a).push(i);}let c=Array.from(n.keys()).sort((i,a)=>{let l=S(i,e,r),u=S(a,e,r);return l.localeCompare(u)});s+=`# Search Results

`;for(let i of c){let a=n.get(i),l=S(i,e,r);s+=`## ${l}

`;let u=a.sort((d,g)=>!d.ts||!g.ts?0:Number(d.ts)-Number(g.ts));for(let d of u){if(!d.ts)continue;let g=new Date(Number(d.ts)*1e3),h=g.toLocaleDateString(),k=B(g),T=d.username||"Unknown User";d.user&&e.users[d.user]&&(T=e.users[d.user].displayName);let C="",b=d.ts||"",x=d.permalink||"";if(x.includes("thread_ts=")){let L=x.match(/thread_ts=([^&]+)/);(L?L[1]:"")===b?C=` [\u{1F4AC} Start of Thread](${x})`:C=` [\u{1F4AC} Part of Thread](${x})`;}s+=`- **${h}** [${k}](${d.permalink||""}) **${T}**:${C} `;let te=W(d.text||"",e).split(`
`);if(s+=te[0]+`
`,te.length>1){let L="    ";s+=te.slice(1).map(fe=>`${L}${fe}`).join(`
`)+`
`;}s+=`
`;}s+=`
`;}return s}function Ve(t){let e=`# Current Slack Status

`;if(!t.status&&!t.emoji)return e+=`No status is currently set.
`,e;if(t.emoji?e+=`**Status:** ${t.emoji} ${t.status}

`:e+=`**Status:** ${t.status}

`,t.expirationTime){let r=new Date(t.expirationTime);e+=`**Expires:** ${r.toLocaleString()}
`;}else e+=`**Expires:** Never (permanent status)
`;return e}function Qe(t){let e=`# Status Update

`;if(t.success)if(e+=`\u2705 Status updated successfully

`,t.emoji?e+=`**New Status:** ${t.emoji} ${t.text}

`:e+=`**New Status:** ${t.text}

`,t.expirationTime){let r=new Date(t.expirationTime);e+=`**Expires:** ${r.toLocaleString()}
`;}else e+=`**Expires:** Never (permanent status)
`;else e+=`\u274C Failed to update status

`;return e}var Ut=z$1.object({query:z$1.string().describe('Search query with Slack search modifiers. Supports operators like "from:", "to:", "with:", "in:", "has:", etc. For user searches, use from:@username (e.g., from:@john.doe) or from:"Display Name" (with quotes for names with spaces). For channel searches, use in:channel_name (e.g., in:general) or in:<#C12345> (using channel ID). Use the slack_user_search or slack_channel_search tools first to find the correct format if needed.'),count:z$1.number().int().optional().default(100).describe("Maximum number of results to return (1-1000). Default is 100.")}),z={name:"slack_search",description:"Perform a search in Slack using standard Slack search syntax and return matching messages.",parameters:Ut,annotations:{},execute:async({query:t,count:e},{session:r})=>{let o=await Ge(t,e),s={channels:o.channels,users:o.users};return He(o.messages,s,o.userId,r.context)}};var Ot=z$1.object({text:z$1.string().describe("Status text to display (up to 100 characters)"),emoji:z$1.string().optional().describe('Emoji code to display with status (without colons, e.g. "computer" for :computer:)'),duration:z$1.number().int().optional().describe("Duration in minutes before automatically clearing the status")}),jt=z$1.object({}),Z={name:"slack_set_status",description:"Set the current user's Slack status, optionally with an emoji and duration.",parameters:Ot,annotations:{},execute:async({text:t,emoji:e,duration:r})=>{let o=await ze(t,e,r);return Qe(o)}},q={name:"slack_get_status",description:"Get the current user's Slack status including text, emoji, and expiration.",parameters:jt,annotations:{},execute:async t=>{let e=await Ze();return Ve(e)}};var It=z$1.object({text:z$1.string().describe("The reminder text (what you want to be reminded about)"),time:z$1.string().describe('When to send the reminder. Supports unix timestamp, ISO datetime (YYYY-MM-DDTHH:MM:SS), or natural language like "in 5 minutes", "tomorrow at 9am", "next Monday"'),user:z$1.string().optional().describe('Slack user ID to create the reminder for. If omitted, creates reminder for the current user. Must start with "U" followed by alphanumeric characters.')}),J={name:"slack_create_reminder",description:"Create a reminder in Slack for yourself or another user.",parameters:It,annotations:{},execute:async({text:t,time:e,user:r})=>{let o=await qe(t,e,r);return `
## Reminder Created
- **Text:** ${t}
- **Time:** ${e}
${r?`- **User:** ${r}`:""}
- **Success:** ${o.success?"\u2705":"\u274C"}
    `.trim()}};var Ft=z$1.object({channel:z$1.string().describe("Slack channel ID where the thread is located (starts with C, D, or G followed by alphanumeric characters)"),ts:z$1.string().describe('Timestamp of the parent message in Unix epoch time format (e.g., "1234567890.123456")'),limit:z$1.number().int().optional().default(100).describe("Maximum number of replies to fetch (1-1000). If not specified, defaults to all replies.")}),H={name:"slack_get_thread_replies",description:"Fetch replies for a specific message thread in a Slack channel.",parameters:Ft,annotations:{},execute:async({channel:t,ts:e,limit:r})=>{let o=await Ye(t,e,r),s=`## Thread Replies

`;return o.replies.length===0?s+="No replies found in this thread.":(s+=`Found ${o.replies.length} replies:

`,o.replies.forEach((n,c)=>{let i=o.users[n.user??""]?.displayName||n.user,a=n.ts?new Date(parseInt(n.ts)*1e3).toLocaleString():"Unknown time";s+=`### Reply ${c+1}
`,s+=`- **From:** ${i}
`,s+=`- **Time:** ${a}
`,s+=`- **Text:** ${n.text||""}

`;})),s}};var Wt=z$1.object({count:z$1.number().int().optional().default(100).describe("Number of recent messages to analyze (1-1000). Default is 100."),user:z$1.string().optional().describe(`Slack user ID to analyze activity for (e.g. "U12345678"). If omitted, analyzes the current user's activity.`)}),V={name:"slack_user_activity",description:"Analyze a Slack user's recent messaging activity and provide a summary by channel.",parameters:Wt,annotations:{},execute:async({count:t,user:e})=>{let r=await Je(t,e),o=`## User Activity Summary

`;return o+=`- **User:** ${r.userId}
`,o+=`- **Total Messages:** ${r.totalMessages}
`,o+=`- **Time Period:** ${r.timePeriod}

`,o+=`### Channel Breakdown

`,r.channelBreakdown.length===0?o+="No channel activity found.":(o+=`| Channel | Message Count | % of Total |
`,o+=`| ------- | ------------- | ---------- |
`,r.channelBreakdown.forEach(s=>{let n=(s.messageCount/r.totalMessages*100).toFixed(1);o+=`| ${s.channelName} | ${s.messageCount} | ${n}% |
`;})),o}};var Bt=z$1.object({query:z$1.string().describe("A search term to find Slack users. Can be a display name, username, or partial match."),limit:z$1.number().int().min(1).max(100).optional().default(20).describe("Maximum number of users to check for matches (1-100). Default is 20.")}),Q={name:"slack_user_search",description:"Search for Slack users by display name, real name, or username.",parameters:Bt,annotations:{},execute:async({query:t,limit:e})=>{let r=await w(m),o=t.trim().replace(/^@/,"");if(!o)return "Please provide a search term to find users.";m.log.debug?.(`Fetching users from Slack API with limit: ${e}`);let s;try{if(s=await r.users.list({limit:200}),m.log.debug?.(`API response received: ${s.ok?"success":"failure"}`),m.log.debug?.(`Members found: ${s.members?.length||0}`),!s.ok||!s.members)return `Failed to retrieve user list from Slack. Response: ${JSON.stringify(s)}`}catch(l){return m.log.debug?.(`API error: ${l}`),`Error calling Slack API: ${l}`}m.log.debug?.(`Filtering ${s.members.length} users for query: "${o}"`);let n=s.members.filter(l=>l.deleted||l.is_bot?false:l.profile?.display_name?.toLowerCase().includes(o.toLowerCase())||l.profile?.real_name?.toLowerCase().includes(o.toLowerCase())||l.name?.toLowerCase().includes(o.toLowerCase()));if(m.log.debug?.(`Found ${n.length} users matching "${o}"`),n.length===0)return `No users found matching "${t}".`;let c=n.map(l=>{let u=l.profile?.display_name||"",d=l.profile?.real_name||"",h=`@${l.name||""}`,k=u.includes(" ")?`from:"${u}"`:`from:${h}`;return {id:l.id,username:h,display_name:u,real_name:d,search_format:k}});c.sort((l,u)=>l.username.toLowerCase()===`@${o.toLowerCase()}`?-1:u.username.toLowerCase()===`@${o.toLowerCase()}`?1:l.display_name.toLowerCase()===o.toLowerCase()?-1:u.display_name.toLowerCase()===o.toLowerCase()?1:l.display_name.localeCompare(u.display_name));let i=c.slice(0,e),a=`## User Search Results for "${t}" (Top ${i.length})

`;return a+=`| User | Display Name | Search Format |
`,a+=`|------|-------------|---------------|
`,i.forEach(l=>{a+=`| ${l.username} | ${l.display_name||l.real_name} | \`${l.search_format}\` |
`;}),a+=`
*Found ${n.length} total matching users. Showing top ${i.length}.*
`,a+=`
To search for messages from these users, use the search format in the slack_search tool.`,a}};var Gt=z$1.object({user_id:z$1.string().describe('Slack user ID to get profile information for. Must start with "U" followed by alphanumeric characters.')}),X={name:"slack_get_user_profile",description:"Fetch detailed profile information for a specific Slack user by their ID.",parameters:Gt,annotations:{},execute:async({user_id:t})=>{let e=await Ke(t),r=`## Slack User Profile: ${e.displayName}

`;if(r+=`### Basic Information
`,r+=`- **User ID:** \`${e.userId}\`
`,r+=`- **Username:** @${e.username}
`,r+=`- **Display Name:** ${e.displayName}
`,r+=`- **Real Name:** ${e.realName||"Not set"}
`,r+=`- **Job Title:** ${e.title||"Not set"}
`,r+=`- **Email:** ${e.email||"Not available"}
`,r+=`- **Phone:** ${e.phone||"Not set"}
`,r+=`
### Status
`,r+=`- **Current Status:** ${e.status.text?e.status.text:"No status set"} ${e.status.emoji||""}
`,e.status.expiration&&(r+=`- **Status Expiration:** ${e.status.expiration}
`),r+=`
### Account Information
`,r+=`- **Team ID:** ${e.teamId||"Unknown"}
`,r+=`- **Timezone:** ${e.timezone||"Unknown"} (${e.timezoneLabel||""})
`,r+=`- **Account Type:** ${e.isBot?"Bot":"User"}
`,e.isAdmin||e.isOwner){let o=[];e.isOwner&&o.push("Owner"),e.isAdmin&&o.push("Admin"),r+=`- **Roles:** ${o.join(", ")}
`;}if(e.isRestricted||e.isUltraRestricted){let o=[];e.isRestricted&&o.push("Restricted"),e.isUltraRestricted&&o.push("Ultra Restricted"),r+=`- **Restrictions:** ${o.join(", ")}
`;}return r+=`- **Last Updated:** ${e.updated||"Unknown"}
`,e.avatarUrl&&(r+=`
### Profile Image
`,r+=`![${e.displayName}'s profile picture](${e.avatarUrl})
`),r}};function et(t){t.command("mcp").description("Start an MCP server with search and status capabilities").action(async()=>{if(!ne.match(/^\d+\.\d+\.\d+$/))throw new Error("Invalid version format");let e=new FastMCP({name:"slack-tools-server",version:ne});e.addTool(G),e.addTool(z),e.addTool(Z),e.addTool(q),e.addTool(J),e.addTool(H),e.addTool(V),e.addTool(Q),e.addTool(X),e.start({transportType:"stdio"});});}function Zt(t){return t.replace(/^slack_/,"").replace(/([a-z0-9])([A-Z])/g,"$1-$2").replace(/_/g,"-").toLowerCase()}function qt(t,e){let r=t.replace(/([A-Z])/g,"-$1").toLowerCase();return e._def.typeName==="ZodBoolean"?`--${r}`:`--${r} <value>`}function Yt(t){let e=t;for(;"innerType"in e._def;)e=e._def.innerType;e._def.coerce===false&&(e._def.coerce=true);}function y(t,e){let r=e.name,o=Zt(r),s=e.parameters.shape,n=t.command(o).description(e.description||"");Object.entries(s).forEach(([c,i])=>{let a=n.createOption(qt(c,i),i.description||"");i._def.defaultValue&&(a.defaultValue=i._def.defaultValue()),n.addOption(a);}),n.action(async c=>{try{await Jt(s,c,e,o);}catch(i){console.error("Error:",i),process.exit(1);}});}async function Jt(t,e,r,o){let s=Object.fromEntries(Object.entries(t).map(([i,a])=>{let l=i.replace(/([A-Z])/g,"-$1").toLowerCase(),u=e[i]||e[l];return Yt(a),[i,u]})),n=r.parameters.safeParse(s);n.success||(console.error(`Error: Invalid arguments for command "${o}":`),n.error.errors.forEach(i=>{console.error(`  - ${i.path.join(".")}: ${i.message}`);}),console.log({params:s}),process.exit(1));let c=await r.execute(n.data,{log:{...console,...m.log},reportProgress:()=>Promise.resolve(),session:{}});typeof c=="string"?console.log(c):"isError"in c&&c.isError?(console.error(c.content),process.exit(1)):console.log(c);}function tt(t){he(t),_e(t),De(t),et(t),y(t,G),y(t,z),y(t,Z),y(t,q),y(t,J),y(t,H),y(t,V),y(t,Q),y(t,X);}var er=fileURLToPath(import.meta.url),tr=dirname(er),rr=JSON.parse(readFileSync(join(tr,"../package.json"),"utf8")),ee=new Command;ee.name("slack-tools-mcp").description("CLI for extracting Slack tokens and cookies and making API calls with MCP support").version(rr.version).option("-w, --workspace <workspace>","Specify Slack workspace URL or name").option("-l, --last-workspace","Use the last used workspace").option("-d, --debug","Enable debug mode for detailed logging");tt(ee);ee.hook("preAction",async t=>{let e=t.opts();if(m.debug=e.debug,e.workspace)await Ie(e.workspace),m.workspace=e.workspace;else if(e.lastWorkspace){let r=await je();r?m.workspace=r:(console.error("No last workspace found. Please specify a workspace using --workspace."),process.exit(1));}});ee.parse(process.argv);//# sourceMappingURL=cli.mjs.map
//# sourceMappingURL=cli.mjs.map