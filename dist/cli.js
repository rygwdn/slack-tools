#!/usr/bin/env node
import {Command}from'commander';import {readFileSync,promises,existsSync}from'fs';import {join,dirname}from'path';import {fileURLToPath}from'url';import T from'keytar';import {WebClient,LogLevel}from'@slack/web-api';import {join as join$1}from'node:path';import {platform,homedir as homedir$1}from'node:os';import {promisify}from'node:util';import {exec}from'child_process';import me from'sqlite3';import {open}from'sqlite';import ue from'crypto';import {Level}from'level';import {homedir}from'os';import*as Re from'fs/promises';import {McpServer}from'@modelcontextprotocol/sdk/server/mcp.js';import {StdioServerTransport}from'@modelcontextprotocol/sdk/server/stdio.js';import {z}from'zod';var v="slack-tools",oe="slack-cookie";async function se(r){for(let[e,s]of Object.entries(r.tokens))await T.setPassword(v,e,JSON.stringify(s));r.cookie&&await T.setPassword(v,oe,JSON.stringify(r.cookie));}async function ne(){try{let r=await T.findCredentials(v);if(r.length===0)return null;let e={},s=null;for(let t of r)if(t.account===oe)try{s=JSON.parse(t.password);}catch(o){console.error("Failed to parse cookie from keychain:",o);}else try{let o=JSON.parse(t.password);e[t.account]=o;}catch(o){console.error(`Failed to parse token for ${t.account}:`,o);}return Object.keys(e).length===0?null:{tokens:e,cookie:s}}catch(r){return console.error("Failed to read auth from keychain:",r),null}}async function _(){let r=await T.findCredentials(v);for(let e of r)await T.deletePassword(v,e.account);}function ae(r){r.command("clear").description("Clear stored authentication from keychain").action(async()=>{try{console.error("Clearing stored authentication from keychain..."),await _(),console.error("Authentication cleared successfully.");}catch(e){console.error("Error:",e),process.exit(1);}});}var ut=promisify(exec);function le(r,e){try{let s=r.slice(0,3).toString(),t;if(s==="v10"||s==="v11")t=r.slice(3);else throw new Error("Unsupported cookie version");let o=Buffer.from(" ".repeat(16)),n=ue.createDecipheriv("aes-128-cbc",e,o),a=Buffer.concat([n.update(t),n.final()]),i=a.length;for(;i>0&&a[i-1]===0;)i--;return a.slice(0,i).toString("utf8")}catch(s){throw new Error(`Failed to decrypt cookie value: ${s instanceof Error?s.message:String(s)}`)}}async function dt(){try{let{stdout:r}=await ut('security find-generic-password -wa "Slack App Store Key"'),e=r.trim(),s=Buffer.from("saltysalt");return ue.pbkdf2Sync(e,s,1003,16,"sha1")}catch(r){throw new Error(`Could not retrieve Slack encryption key from keychain: ${r instanceof Error?r.message:String(r)}`)}}function ft(){let r=[join$1(homedir$1(),"Library/Application Support/Slack/Cookies"),join$1(homedir$1(),"Library/Containers/com.tinyspeck.slackmacgap/Data/Library/Application Support/Slack/Cookies")];for(let e of r)if(existsSync(e))return e;throw new Error("Could not find Slack's cookies database")}async function de(){try{let r=ft(),e=await dt(),s=await open({filename:r,driver:me.Database,mode:me.OPEN_READONLY});try{let t=await s.all('SELECT name, encrypted_value FROM cookies WHERE name = "d" ORDER BY LENGTH(encrypted_value) DESC');if(!t||t.length===0||!t[0].encrypted_value)throw new Error('Could not find any Slack "d" cookies in cookies database');if(t.length>1){let i=new Set,c=[];for(let m of t)try{let l=le(m.encrypted_value,e),u=l.indexOf("xoxd-");if(u!==-1){let g=l.substring(u);i.add(g),c.push({...m,decryptedValue:g});}}catch{}if(i.size>1)throw new Error(`Found ${i.size} different Slack tokens in cookies. Please clear unused cookies.`)}let o=t[0],n=le(o.encrypted_value,e),a=n.indexOf("xoxd-");if(a!==-1){let i=n.substring(a);return {name:o.name,value:i}}if(!n.startsWith("xoxd-"))throw new Error("Decrypted cookie value does not have the required xoxd- prefix");return {name:o.name,value:n}}finally{await s.close();}}catch(r){throw new Error(`Failed to extract Slack cookie: ${r instanceof Error?r.message:String(r)}`)}}function gt(){if(platform()==="darwin"){let r=[join$1(homedir$1(),"Library/Containers/com.tinyspeck.slackmacgap/Data/Library/Application Support/Slack/Local Storage/leveldb"),join$1(homedir$1(),"Library/Application Support/Slack/Local Storage/leveldb")];for(let e of r)if(e)return e;throw new Error("Could not find Slack's Local Storage directory on macOS")}else if(platform()==="linux")return join$1(homedir$1(),".config/Slack/Local Storage/leveldb");throw new Error("slacktokens only works on macOS or Linux.")}async function pe(r){let e=gt(),s=new Level(e,{createIfMissing:false});try{await s.open();let t,o=await s.iterator().all();for(let[i,c]of o)if(i.toString().includes("localConfig_v2")){t=c.toString();break}if(!t)throw new Error("Slack's Local Storage not recognised: localConfig not found");let n=JSON.parse(t.slice(1)),a={};for(let i of Object.values(n.teams))a[i.url]={token:i.token,name:i.name};return a}catch(t){if(console.error("Error:",t),t&&typeof t=="object"&&"code"in t){let o=t;if(o.code==="LEVEL_DATABASE_NOT_OPEN"&&o.cause?.code==="LEVEL_LOCKED")throw new Error(`Slack's Local Storage database is locked. Please make sure Slack is completely closed:
1. Quit Slack from the menu bar
2. Check Activity Monitor/Task Manager to ensure no Slack processes are running
3. Try running this command again`)}throw t}finally{r?.debug&&r.debugLog("Closing database"),s.status==="open"&&await s.close();}}function ge(r,e){if(!e)return r;let s={};for(let[t,o]of Object.entries(r.tokens))(t.includes(e)||o.name.toLowerCase().includes(e.toLowerCase()))&&(s[t]=o);return {...r,tokens:Object.keys(s).length>0?s:r.tokens}}var he=false;async function we(r){if(!r)throw new Error("Auth test failed: No stored auth");let e=Object.values(r.tokens)[0]?.token;if(!e)throw new Error("Auth test failed: No token found");try{if(!(await new WebClient(e).auth.test()).ok)throw new Error("Auth test failed: API returned not ok")}catch(s){throw console.error("Auth test API call failed:",s),new Error("Auth test failed: API call error")}}async function D(r={}){let{workspace:e,context:s}=r,t=he;he=true;let o=await ne();if(o?.cookie&&o?.tokens&&!t)try{return await we(o),ge(o,e)}catch(a){console.error("Auth error encountered, clearing stored credentials and retrying...",a),await _();}let n={cookie:await de(),tokens:await pe(s)};return await we(n),await se(n),ge(n,e)}function ke(r,e){r.command("print").description("Print tokens and cookie").option("-q, --quiet","Suppress output and only show tokens/cookies").action(async s=>{try{s.quiet||console.log("Getting Slack credentials...");let t=await D({workspace:e.hasWorkspace?e.workspace:void 0,quiet:s.quiet});Object.keys(t.tokens).length===0&&(console.error("Error: No tokens found."),e.hasWorkspace&&console.error(`No workspace matching "${e.workspace}" was found.`),process.exit(1)),s.quiet||console.log(`
Found tokens for workspaces:
`);for(let[o,n]of Object.entries(t.tokens))s.quiet?console.log(`${n.token}`):(console.log(`${n.name} (${o})`),console.log(`Token: ${n.token}
`));s.quiet?console.log(`${t.cookie.value}`):(console.log("Found cookie:"),console.log(`${t.cookie.name}: ${t.cookie.value}
`),Object.keys(t.tokens).length>1&&!e.hasWorkspace&&(console.log(`
Tip: To filter results for a specific workspace, use one of:`),console.log("  - Use -w, --workspace <workspace> to specify a workspace directly"),console.log("  - Use -l, --last-workspace to use your most recently used workspace")));}catch(t){console.error("Error:",t),process.exit(1);}});}async function kt(r,e){let s=await D({context:e});if(e.debugLog("Available workspaces:",Object.keys(s.tokens).join(", ")),e.debugLog("Looking for workspace:",r),s.tokens[r]){let o=s.tokens[r].token;return e.debugLog(`Found token for workspace URL: ${r}`),e.debugLog(`Token: ${o.substring(0,5)}...${o.substring(o.length-5)}`),{token:o,workspaceUrl:r,cookie:s.cookie}}let t=Object.entries(s.tokens).find(([,o])=>o.name.toLowerCase()===r.toLowerCase());if(t){let o=t[1].token;return e.debugLog(`Found token for workspace name: ${t[1].name}`),e.debugLog(`Workspace URL: ${t[0]}`),e.debugLog(`Token: ${o.substring(0,5)}...${o.substring(o.length-5)}`),{token:o,workspaceUrl:t[0],cookie:s.cookie}}throw e.debugLog("All available workspaces:"),Object.entries(s.tokens).forEach(([o,n])=>{e.debugLog(`- ${n.name} (${o})`);}),new Error(`Could not find workspace "${r}". Use 'slack-tools print' to see available workspaces.`)}async function w(r,e){let{token:s,cookie:t,workspaceUrl:o}=await kt(r,e);if(e.debugLog(`Using workspace: ${o}`),!s.startsWith("xoxc-"))throw new Error(`Invalid token format: token should start with 'xoxc-'. Got: ${s}`);return new WebClient(s,{headers:{Cookie:`d=${t.value}`},logLevel:e.debug?LogLevel.DEBUG:LogLevel.ERROR})}async function Ce(r,e){let s;if(r.since){if(s=new Date(r.since),isNaN(s.getTime()))throw new Error(`Invalid start date: ${r.since}, use YYYY-MM-DD format`)}else {let o=new Date;s=new Date(o),s.setHours(0,0,0,0),e.debugLog(`Using start date: ${s.toISOString()}`);}let t;if(r.until){if(t=new Date(r.until),isNaN(t.getTime()))throw new Error(`Invalid end date: ${r.until}, use YYYY-MM-DD format`);t.setHours(23,59,59,999);}else {let o=new Date;t=new Date(o),t.setHours(23,59,59,999),e.debugLog(`Using end date: ${t.toISOString()}`);}return {startTime:s,endTime:t}}function K(r){return r.toISOString().split("T")[0]}function Se(r){let e=new Date(r);return e.setDate(e.getDate()-1),e}function be(r){let e=new Date(r);return e.setDate(e.getDate()+1),e}async function yt(r,e,s){let t=e.replace(/^@/,"").replace(/^"(.*)"$/,"$1");try{if(/^U[A-Z0-9]{8,}$/.test(t)){let c=await r.users.info({user:t});if(c.ok&&c.user)return `<@${t}>`}if(/.+@.+\..+/.test(t)){let c=await r.users.lookupByEmail({email:t});if(c.ok&&c.user)return `<@${c.user.id}>`}let n=(await r.users.list({})).members||[],a=n.find(c=>c.profile?.real_name?.toLowerCase()===t.toLowerCase()||c.profile?.display_name?.toLowerCase()===t.toLowerCase()||c.name?.toLowerCase()===t.toLowerCase());if(a)return `<@${a.id}>`;let i=n.filter(c=>c.profile?.real_name?.toLowerCase().includes(t.toLowerCase())||c.profile?.display_name?.toLowerCase().includes(t.toLowerCase())||c.name?.toLowerCase().includes(t.toLowerCase()));return i.length===1?`<@${i[0].id}>`:i.length>1?(s.debugLog(`Multiple users found matching "${t}". Using the first match.`),`<@${i[0].id}>`):(s.debugLog(`No user found matching "${t}". Using as-is.`),`@${t}`)}catch(o){return s.debugLog(`Error resolving user "${e}": ${o}`),`@${t}`}}async function $e(r,e,s){let t=/(from:|to:|with:)@?(("([^"]+)")|([^\s]+))/g,o=Array.from(e.matchAll(t));if(o.length===0)return e;let n=e;for(let a of o){let[i,c,m,l,u,g]=a,h=await yt(r,u||g,s),k=`${c}${h}`;n=n.replace(i,k);}return s.debugLog(`Enhanced query: "${n}"`),n}async function xe(r,e,s,t,o){if(!e)throw new Error("Username is required for searching messages");let n=Se(s.startTime),a=be(s.endTime),i=K(n),c=K(a),m=`from:${e} after:${i} before:${c}`;o.debugLog(`Search query: ${m}`);let l=await $(r,m,t,o),u=`is:thread with:@${e} after:${i} before:${c}`;o.debugLog(`Thread query: ${u}`);let g=await $(r,u,t,o),d=`to:${e} after:${i} before:${c}`;o.debugLog(`Mention query: ${d}`);let h=await $(r,d,t,o);return {messages:l,threadMessages:g,mentionMessages:h}}async function $(r,e,s,t){t.debugLog(`Original search query: ${e}`);let o=await $e(r,e,t);t.debugLog(`Executing search with enhanced query: ${o}`);try{return (await r.search.messages({query:o,sort:"timestamp",sort_dir:"asc",count:s})).messages?.matches||[]}catch(n){throw t.debugLog(`Search error: ${n}`),new Error(`Failed to search Slack: ${n}`)}}var X=join(homedir(),".slack-tools"),Me=join(X,"config.json"),Le=join(X,"slack-cache.json"),St=24*60*60*1e3,Q={lastWorkspace:null};async function N(){try{await promises.mkdir(X,{recursive:!0});}catch(r){throw console.error("Failed to create config directory:",r),new Error(`Could not create cache directory: ${r.message}`)}}async function Te(){await N();try{let r=await promises.readFile(Me,"utf8");return {...Q,...JSON.parse(r)}}catch(r){return r.code==="ENOENT"||console.error("Failed to load config:",r),Q}}async function bt(r){await N();try{await promises.writeFile(Me,JSON.stringify(r,null,2));}catch(e){throw console.error("Failed to save config:",e),new Error(`Could not save cache configuration: ${e.message}`)}}async function ve(){return (await Te()).lastWorkspace}async function Ee(r){let e=await Te();e.lastWorkspace=r,await bt(e);}async function _e(r=Le,e=St){try{await N();let s=await promises.readFile(r,"utf-8"),t=JSON.parse(s);if(Date.now()-t.lastUpdated<e)return t}catch{}return null}async function x(r,e=Le){await N(),await promises.writeFile(e,JSON.stringify(r,null,2));}function $t(r){let e=new Set,s=new Set;for(let t of r){t.user&&e.add(t.user),t.channel?.id&&s.add(t.channel.id);let o=/<@([A-Z0-9]+)>/g,n=t.text?.match(o)||[];for(let c of n){let m=c.slice(2,-1);e.add(m);}let a=/<#([A-Z0-9]+)(\|[^>]+)?>/g,i=(t.text||"").match(a)||[];for(let c of i){let m=c.slice(2).split("|")[0];s.add(m);}}return {userIds:e,channelIds:s}}async function xt(r,e,s,t,o){for(let n of e)try{let a=await r.users.info({user:n});a.ok&&a.user&&(s.users[n]={displayName:a.user.real_name||a.user.name||n,isBot:!!a.user.is_bot||(a.user.name||"").includes("bot")},o&&t.debugLog(`Added missing user to cache: ${s.users[n].displayName}`));}catch(a){t.debugLog(`Could not fetch info for user ${n}:`,a);}}async function Mt(r,e,s,t,o){if(!s.users[e])try{let n=await r.users.info({user:e});n.ok&&n.user&&(s.users[e]={displayName:n.user.real_name||n.user.name||e,isBot:!!n.user.is_bot||(n.user.name||"").includes("bot")},o&&t.debugLog(`Added missing DM user to cache: ${s.users[e].displayName}`));}catch(n){t.debugLog(`Could not fetch info for DM user ${e}:`,n);}}async function Lt(r,e,s){try{return (await r.conversations.members({channel:e})).members||[]}catch(t){s.debugLog(`Could not fetch members for channel ${e}:`,t);return}}async function Tt(r,e,s,t,o,n){for(let a of e)try{let i=await r.conversations.info({channel:a});if(i.ok&&i.channel){let c=i.channel,m=c.name||a,l;if(c.is_im){let u="user"in c?c.user:void 0;u&&(n.add(u),await Mt(r,u,s,t,o),l=[u]);}else c.is_mpim&&(l=await Lt(r,a,t));s.channels[a]={displayName:m,type:c.is_im?"im":c.is_mpim?"mpim":"channel",members:l},o&&t.debugLog(`Added missing channel to cache: ${m}`);}}catch(i){t.debugLog(`Could not fetch info for channel ${a}:`,i);}}async function vt(){return await _e()||{users:{},channels:{},lastUpdated:0}}async function M(r,e,s){let t=await vt(),o=t.lastUpdated>0,{userIds:n,channelIds:a}=$t(e),i=Array.from(n).filter(m=>!t.users[m]),c=Array.from(a).filter(m=>!t.channels[m]);return o?(s.debugLog("Using cached user and channel information with updates for missing entries"),s.debugLog(`Found ${i.length} users and ${c.length} channels missing from cache`)):s.debugLog("No cache found, fetching all user and channel information"),await xt(r,i,t,s,o),await Tt(r,c,t,s,o,n),t.lastUpdated=Date.now(),await x(t),t}async function U(r,e,s){try{let t=s.workspace,o=await w(t,s),a=(await o.auth.test()).user_id;s.debugLog(`Searching messages with query: ${r}`);let i=await $(o,r,e,s);s.debugLog(`Found ${i.length} matching messages. Fetching details...`);let c=await M(o,i,s);return c.lastUpdated=Date.now(),await x(c),{messages:i,userId:a,channels:c.channels,users:c.users}}catch(t){throw new Error(`Search failed: ${t}`)}}function ee(r){if(!r)return "";let e=r;return e.startsWith(":")||(e=`:${e}:`),e.endsWith(":")||(e=`${e}:`),e}function Et(r){return r?Math.floor(Date.now()/1e3)+r*60:0}async function A(r,e,s,t){try{let o=e.workspace;e.debugLog("Setting status for workspace:",o);let n=ee(s||"");n&&e.debugLog("Using emoji:",n);let a=Et(t);t?e.debugLog("Status will expire in",t,"minutes at",new Date(a*1e3).toISOString()):e.debugLog("Setting permanent status (no expiration)");let c=await(await w(o,e)).users.profile.set({profile:{status_text:r,status_emoji:n,status_expiration:a}});return e.debugLog("API response:",c),{success:!0,text:r,emoji:n,expirationTime:a?new Date(a*1e3).toISOString():null}}catch(o){throw new Error(`Status update failed: ${o}`)}}async function De(r){try{let e=r.workspace,t=await(await w(e,r)).users.profile.get({});return {status:t.profile?.status_text||"",emoji:t.profile?.status_emoji||"",expirationTime:t.profile?.status_expiration?new Date(Number(t.profile.status_expiration)*1e3).toISOString():null}}catch(e){throw new Error(`Status retrieval failed: ${e}`)}}async function I(r,e,s,t){try{let o=s.workspace;s.debugLog("Creating reminder for workspace:",o),s.debugLog("Reminder text:",r),s.debugLog("Reminder time:",e),t&&s.debugLog("Reminder for user:",t);let a=await(await w(o,s)).reminders.add({text:r,time:e,user:t});return s.debugLog("API response:",a),{success:!0,reminder:a.reminder}}catch(o){throw new Error(`Reminder creation failed: ${o}`)}}async function R(r,e,s,t){try{let o=s.workspace;s.debugLog("Getting thread replies in workspace:",o),s.debugLog("Channel:",r),s.debugLog("Thread timestamp:",e),t&&s.debugLog("Limit:",t);let n=await w(o,s),i=(await n.conversations.replies({channel:r,ts:e,limit:t})).messages?.filter(l=>l.ts!==e)||[];s.debugLog("Found replies:",i.length);let c=i.map(l=>({iid:l.ts,ts:l.ts,text:l.text,user:l.user,channel:{id:r},team:l.team})),m=await M(n,c,s);return {replies:i,channels:m.channels,users:m.users}}catch(o){throw new Error(`Getting thread replies failed: ${o}`)}}async function P(r,e,s){try{let t=e.workspace;e.debugLog("Getting user activity for workspace:",t),s&&e.debugLog("User:",s);let o=await w(t,e),n=s;n||(n=(await o.auth.test()).user_id,e.debugLog("Using current user ID:",n));let a=`from:<@${n}>`,i=await $(o,a,r,e);e.debugLog(`Found ${i.length} messages for user`);let c=await M(o,i,e),m={};i.forEach(u=>{let g=u.channel?.id||"unknown";m[g]=(m[g]||0)+1;});let l=Object.entries(m).map(([u,g])=>({channelId:u,channelName:c.channels[u]?.displayName||"Unknown channel",messageCount:g}));return l.sort((u,g)=>g.messageCount-u.messageCount),{userId:n,totalMessages:i.length,channelBreakdown:l,timePeriod:`Last ${r} messages`}}catch(t){throw new Error(`Getting user activity failed: ${t}`)}}async function Ne(r,e){try{let s=e.workspace,t=await w(s,e),o=await t.users.info({user:r});if(!o.ok||!o.user)throw new Error(`User not found: ${r}`);let n=await t.users.profile.get({user:r});if(!n.ok||!n.profile)throw new Error(`Profile not found for user: ${r}`);return {userId:r,username:o.user.name,realName:o.user.real_name,displayName:n.profile.display_name||o.user.real_name||o.user.name,email:n.profile.email,phone:n.profile.phone,title:n.profile.title,teamId:o.user.team_id,timezone:o.user.tz,timezoneLabel:o.user.tz_label,avatarUrl:n.profile.image_original||n.profile.image_512,status:{text:n.profile.status_text||"",emoji:n.profile.status_emoji||"",expiration:n.profile.status_expiration?new Date(Number(n.profile.status_expiration)*1e3).toISOString():null},isBot:o.user.is_bot||!1,isAdmin:o.user.is_admin||!1,isOwner:o.user.is_owner||!1,isRestricted:o.user.is_restricted||!1,isUltraRestricted:o.user.is_ultra_restricted||!1,updated:o.user.updated?new Date(Number(o.user.updated)*1e3).toISOString():null}}catch(s){throw new Error(`User profile retrieval failed: ${s}`)}}function Ue(r,e){r.command("status <text>").description("Set your Slack status").option("--emoji <emoji>","Emoji for the status (optional)").option("--duration <duration>","Duration in minutes before status expires (omit for permanent)").action(async(s,t)=>{try{let o=t.emoji||"",n=ee(o),a;t.duration?(a=parseInt(t.duration,10),console.log(`Setting status to "${s}"${n?` with emoji ${n}`:""} for ${a} minutes`)):console.log(`Setting status to "${s}"${n?` with emoji ${n}`:""} permanently`),await A(s,e,o,a),console.log("Status set successfully!");}catch(o){console.error("Error:",o),e.debug||console.log(`
Tip: Run with -d/--debug flag for more troubleshooting information`),process.exit(1);}});}function Ae(r,e){r.command("test").description("Test authentication with Slack API").action(async s=>{try{let t=e.workspace;e.debugLog("Testing authentication for workspace:",t),console.log("Testing auth for workspace:",t);let o=await w(t,e);e.debugLog("Calling auth.test API endpoint");let n=await o.auth.test();e.debugLog("Full API response:",n),console.log(`
API Response:`),console.log(JSON.stringify(n,null,2));}catch(t){console.error("Error:",t),e.debug||console.log(`
Tip: Run with -d/--debug flag for more troubleshooting information`),process.exit(1);}});}function S(r,e,s){let t=e.channels[r];if(!t)return r;if(t.type==="channel")return `#${t.displayName}`;if(t.type==="im"&&t.members&&t.members.length>0){let o=t.members[0],n=e.users[o];return `DM with ${n?n.displayName:t.displayName}`}return t.type==="mpim"&&t.members?`Group DM with ${t.members.filter(n=>n!==s).map(n=>e.users[n]?.displayName||n).join(", ")}`:r}function O(r,e){return r?(r=r.replace(/<@([A-Z0-9]+)(?:\|([^>]+))?>/g,(s,t,o)=>{let n=e.users[t];return n?`@${n.displayName}`:o?`@${o}`:s}),r=r.replace(/<#([A-Z0-9]+)(?:\|([^>]+))?>/g,(s,t,o)=>{if(o)return `#${o}`;let n=e.channels[t];return n?`#${n.displayName}`:s}),r=r.replace(/<((?:https?:\/\/)[^|>]+)\|([^>]+)>/g,"[$2]($1)"),r=r.replace(/<((?:https?:\/\/)[^>]+)>/g,"$1"),r.split(`
`).join(`
    `)):""}function W(r){let e=r.getHours().toString().padStart(2,"0"),s=r.getMinutes().toString().padStart(2,"0");return `${e}:${s}`}function _t(r){return typeof r.ts=="string"}function Dt(r){if(r)try{return new URL(r).searchParams.get("thread_ts")||void 0}catch{return}}function Nt(r,e,s,t,o){let n=e.some(i=>{let c=i.user===t,m=i.threadMessages?.some(l=>l.user===t)??false;return c||m}),a=s.channels[r];if(!a)return  true;if(a.type==="im"){let c=s.users[a.members?.[0]||""]?.isBot||false,m=n||!c;return m||o.debugLog(`Filtering out bot channel: ${S(r,s,t)}`),m}return  true}function Ut(r,e){let s=new Map,t=[];for(let o of r){if(!_t(o)){e.debugLog("Skipping message without timestamp");continue}let n=o.thread_ts||Dt(o.permalink);if(n&&o.ts!==n){s.has(n)||s.set(n,[]);let a=s.get(n);if(!a.some(i=>i.ts===o.ts)){let i={...o,thread_ts:n};a.push(i),e.debugLog(`Added message to thread: ${o.text?.slice(0,50)}`);}}else t.push(o),e.debugLog(`Added standalone/parent message: ${o.ts} ${n} ${o.text?.slice(0,50)}`);}return {threadMap:s,standaloneMessages:t}}function F(r,e=[],s,t){let n=new Date(Number(r.ts)*1e3).toISOString().split("T")[0],a=r.channel?.id||"unknown";s.has(n)||s.set(n,new Map);let i=s.get(n);i.has(a)||i.set(a,[]);let c=i.get(a);e.length>0&&t.debugLog(`Adding message with ${e.length} thread replies to ${a}`),c.push({...r,threadMessages:e});}function At(r,e,s){let t=new Map;for(let o of r)if(o.ts&&e.has(o.ts)){let a=e.get(o.ts).filter(i=>i.ts!==o.ts);F(o,a,t,s);}else F(o,[],t,s);for(let[o,n]of e.entries()){if(r.some(c=>c.ts===o))continue;let a=n.sort((c,m)=>Number(c.ts)-Number(m.ts)),i=a.find(c=>c.ts===o);if(i){let c=a.filter(m=>m.ts!==i.ts);F(i,c,t,s);}else {let c=a[0];s.debugLog(`Thread ${o} missing parent, using first reply as parent`);let m={...c,thread_ts:o,ts:o,text:c.text,user:c.user,channel:c.channel},l=a.filter(u=>u.ts!==c.ts);F(m,l,t,s);}}return t}function It(r,e,s){let t="",o=new Date(Number(r.ts)*1e3),n=W(o),a=r.username||"Unknown User";r.user&&e.users[r.user]&&(a=e.users[r.user].displayName),s.debugLog(`Formatting message from ${a}`),t+=`- [*${n}*](${r.permalink||""}) **${a}**: `;let c=O(r.text||"",e).split(`
`);if(t+=c[0]+`
`,c.length>1){let m="    ";t+=c.slice(1).map(l=>`${m}${l}`).join(`
`)+`
`;}return t}function Rt(r,e){let s="",t=r.sort((o,n)=>Number(o.ts)-Number(n.ts));for(let o of t){let n=new Date(Number(o.ts)*1e3),a=W(n),i=o.username||"Unknown User";o.user&&e.users[o.user]&&(i=e.users[o.user].displayName),s+="        - ",o.permalink?s+=`[*${a}*](${o.permalink})`:s+=`*${a}*`;let m=O(o.text||"",e).split(`
`);if(s+=` **${i}**: ${m[0]}
`,m.length>1){let l="            ";s+=m.slice(1).map(u=>`${l}${u}`).join(`
`)+`
`;}}return s}function Ie(r,e,s,t){let o="";t.debugLog(`Processing ${r.length} total messages`);let{threadMap:n,standaloneMessages:a}=Ut(r,t),i=At(a,n,t),c=Array.from(i.keys()).sort();for(let m of c){let l=new Date(m);o+=`# ${l.toDateString()}

`;let u=i.get(m),g=Array.from(u.entries()).map(([d,h])=>[d||"unknown",h]).filter(([d,h])=>Nt(d,h,e,s,t)).sort(([d],[h])=>{let k=S(d,e,s),b=S(h,e,s);return k.localeCompare(b)});for(let[d,h]of g){let k=S(d,e,s);o+=`## ${k}

`;let b=h.sort((y,L)=>Number(y.ts)-Number(L.ts));for(let y of b)o+=It(y,e,t),y.threadMessages?.length&&(t.debugLog(`Adding ${y.threadMessages.length} thread replies for message: ${y.text?.slice(0,50)}`),o+=Rt(y.threadMessages,e),o+=`
`);o+=`
`;}}return o}async function j(r,e){let s=await Ce(r,e),t=await w(e.workspace,e),o=await t.auth.test(),n=o.user_id,a=r.username||o.user;e.debugLog(`Generating my messages summary for user: ${a}`),e.debugLog(`Date range: ${s.startTime.toLocaleDateString()} to ${s.endTime.toLocaleDateString()}`);let{messages:i,threadMessages:c,mentionMessages:m}=await xe(t,a,s,r.count,e),l=[...i,...c,...m];e.debugLog(`Found ${i.length} direct messages, ${c.length} thread messages, and ${m.length} mention messages`),e.debugLog(`Found ${l.length} total messages. Fetching details...`);let u=await M(t,l,e);e.debugLog("Formatting report...");let g=Ie(l,u,n,e);return u.lastUpdated=Date.now(),await x(u),{markdown:g,allMessages:l,userId:n,dateRange:s,cache:u}}function Pe(r,e){r.command("my-messages").description("Generate a summary of your Slack activity including messages you sent and messages mentioning you").option("-u, --username <username>","Slack username to filter by").option("-s, --since <date>","Start date (YYYY-MM-DD format), defaults to today").option("-e, --until <date>","End date (YYYY-MM-DD format), defaults to today").option("-c, --count <number>","Number of messages to fetch (default: 200)","200").option("-o, --output <file>","Output markdown to a file").action(async s=>{try{let t=e.workspace,o=parseInt(s.count,10);e.debugLog(`Generating daily summary for workspace: ${t}`);let n=await j({username:s.username,since:s.since,until:s.until,count:o},e);s.output?(await Re.writeFile(s.output,n.markdown),console.log(`Report written to: ${s.output}`)):console.log(n.markdown);}catch(t){console.error("Error:",t),process.exit(1);}});}function B(r,e,s,t){let o="";if(r.length===0)return t.debugLog("No search results found"),`# Search Results

No messages found matching your search criteria.
`;t.debugLog(`Processing ${r.length} search results`);let n=new Map;for(let i of r){let c=i.channel?.id||"unknown";n.has(c)||n.set(c,[]),n.get(c).push(i);}let a=Array.from(n.keys()).sort((i,c)=>{let m=S(i,e,s),l=S(c,e,s);return m.localeCompare(l)});o+=`# Search Results

`;for(let i of a){let c=n.get(i),m=S(i,e,s);o+=`## ${m}

`;let l=c.sort((u,g)=>!u.ts||!g.ts?0:Number(u.ts)-Number(g.ts));for(let u of l){if(!u.ts)continue;let g=new Date(Number(u.ts)*1e3),d=g.toLocaleDateString(),h=W(g),k=u.username||"Unknown User";u.user&&e.users[u.user]&&(k=e.users[u.user].displayName),o+=`- **${d}** [${h}](${u.permalink||""}) **${k}**: `;let y=O(u.text||"",e).split(`
`);if(o+=y[0]+`
`,y.length>1){let L="    ";o+=y.slice(1).map(J=>`${L}${J}`).join(`
`)+`
`;}o+=`
`;}o+=`
`;}return o}function Fe(r){let e=`# Current Slack Status

`;if(!r.status&&!r.emoji)return e+=`No status is currently set.
`,e;if(r.emoji?e+=`**Status:** ${r.emoji} ${r.status}

`:e+=`**Status:** ${r.status}

`,r.expirationTime){let s=new Date(r.expirationTime);e+=`**Expires:** ${s.toLocaleString()}
`;}else e+=`**Expires:** Never (permanent status)
`;return e}function Oe(r){let e=`# Status Update

`;if(r.success)if(e+=`\u2705 Status updated successfully

`,r.emoji?e+=`**New Status:** ${r.emoji} ${r.text}

`:e+=`**New Status:** ${r.text}

`,r.expirationTime){let s=new Date(r.expirationTime);e+=`**Expires:** ${s.toLocaleString()}
`;}else e+=`**Expires:** Never (permanent status)
`;else e+=`\u274C Failed to update status

`;return e}function je(r,e){r.command("search <query>").description("Search Slack messages and output results as markdown").option("-c, --count <number>","Number of messages to fetch (default: 100)","100").option("-o, --output <file>","Output markdown to a file").action(async(s,t)=>{try{let o=parseInt(t.count,10);e.debugLog(`Searching Slack for: "${s}"`);let n=await U(s,o,e),a=n.messages,i=n.userId,c={lastUpdated:Date.now(),channels:n.channels,users:n.users};e.debugLog("Formatting report...");let m=B(a,c,i,e);t.output?(await Re.writeFile(t.output,m),console.log(`Search results written to: ${t.output}`)):console.log(m);}catch(o){console.error("Error:",o),process.exit(1);}});}function Be(r,e){r.tool("slack_my_messages",{username:z.string().optional().describe("Username or display name to fetch messages for. If omitted, fetches messages for the current user."),since:z.string().optional().describe('Start date in YYYY-MM-DD format (e.g., "2023-01-15"). If omitted, defaults to the beginning of the current day.'),until:z.string().optional().describe('End date in YYYY-MM-DD format (e.g., "2023-01-15"). If omitted, defaults to the end of the current day.'),count:z.number().optional().default(200).describe("Maximum number of messages to retrieve (1-1000). Default is 200.")},async({username:s,since:t,until:o,count:n})=>{try{return {content:[{type:"text",text:(await j({username:s,since:t,until:o,count:n},e)).markdown}]}}catch(a){return {content:[{type:"text",text:`Error: ${a}`}],isError:true}}});}function ze(r,e){r.tool("slack_search",{query:z.string().describe('Search query with Slack search modifiers. Supports operators like "from:", "to:", "with:", "in:", "has:", etc. For user searches, use from:@username (e.g., from:@john.doe) or from:"Display Name" (with quotes for names with spaces). For channel searches, use in:channel_name (e.g., in:general) or in:<#C12345> (using channel ID). Use the slack_user_search or slack_channel_search tools first to find the correct format if needed.'),count:z.number().optional().default(100).describe("Maximum number of results to return (1-1000). Default is 100.")},async({query:s,count:t})=>{try{let o=await U(s,t,e),n={lastUpdated:Date.now(),channels:o.channels,users:o.users};return {content:[{type:"text",text:B(o.messages,n,o.userId,e)}]}}catch(o){return {content:[{type:"text",text:`Error: ${o}`}],isError:true}}});}function Ge(r,e){r.tool("slack_set_status",{text:z.string().describe("Status text to display (up to 100 characters)"),emoji:z.string().optional().describe('Emoji code to display with status (without colons, e.g. "computer" for :computer:)'),duration:z.number().optional().describe("Duration in minutes before automatically clearing the status")},async({text:s,emoji:t,duration:o})=>{try{let n=await A(s,e,t,o);return {content:[{type:"text",text:Oe(n)}]}}catch(n){return {content:[{type:"text",text:`Error: ${n}`}],isError:true}}}),r.tool("slack_get_status",{description:z.string().describe("Gets the current user's Slack status including status text and emoji")},async()=>{try{let s=await De(e);return {content:[{type:"text",text:Fe(s)}]}}catch(s){return {content:[{type:"text",text:`Error: ${s}`}],isError:true}}});}function qe(r,e){r.tool("slack_create_reminder",{text:z.string().describe("The reminder text (what you want to be reminded about)"),time:z.string().describe('When to send the reminder. Supports unix timestamp, ISO datetime (YYYY-MM-DDTHH:MM:SS), or natural language like "in 5 minutes", "tomorrow at 9am", "next Monday"'),user:z.string().optional().describe('Slack user ID to create the reminder for. If omitted, creates reminder for the current user. Must start with "U" followed by alphanumeric characters.')},async({text:s,time:t,user:o})=>{try{let n=await I(s,t,e,o);return {content:[{type:"text",text:`
## Reminder Created
- **Text:** ${s}
- **Time:** ${t}
${o?`- **User:** ${o}`:""}
- **Success:** ${n.success?"\u2705":"\u274C"}
          `.trim()}]}}catch(n){return {content:[{type:"text",text:`Error: ${n}`}],isError:true}}});}function Je(r,e){r.tool("slack_get_thread_replies",{channel:z.string().describe("Slack channel ID where the thread is located (starts with C, D, or G followed by alphanumeric characters)"),ts:z.string().describe('Timestamp of the parent message in Unix epoch time format (e.g., "1234567890.123456")'),limit:z.number().optional().describe("Maximum number of replies to fetch (1-1000). If not specified, defaults to all replies.")},async({channel:s,ts:t,limit:o})=>{try{let n=await R(s,t,e,o),a=`## Thread Replies

`;return n.replies.length===0?a+="No replies found in this thread.":(a+=`Found ${n.replies.length} replies:

`,n.replies.forEach((i,c)=>{let m=n.users[i.user??""]?.displayName||i.user,l=i.ts?new Date(parseInt(i.ts)*1e3).toLocaleString():"Unknown time";a+=`### Reply ${c+1}
`,a+=`- **From:** ${m}
`,a+=`- **Time:** ${l}
`,a+=`- **Text:** ${i.text||""}

`;})),{content:[{type:"text",text:a}]}}catch(n){return {content:[{type:"text",text:`Error: ${n}`}],isError:true}}});}function He(r,e){r.tool("slack_user_activity",{count:z.number().optional().default(100).describe("Number of recent messages to analyze (1-1000). Default is 100."),user:z.string().optional().describe(`Slack user ID to analyze activity for (e.g. "U12345678"). If omitted, analyzes the current user's activity.`)},async({count:s,user:t})=>{try{let o=await P(s,e,t),n=`## User Activity Summary

`;return n+=`- **User:** ${o.userId}
`,n+=`- **Total Messages:** ${o.totalMessages}
`,n+=`- **Time Period:** ${o.timePeriod}

`,n+=`### Channel Breakdown

`,o.channelBreakdown.length===0?n+="No channel activity found.":(n+=`| Channel | Message Count | % of Total |
`,n+=`| ------- | ------------- | ---------- |
`,o.channelBreakdown.forEach(a=>{let i=(a.messageCount/o.totalMessages*100).toFixed(1);n+=`| ${a.channelName} | ${a.messageCount} | ${i}% |
`;})),{content:[{type:"text",text:n}]}}catch(o){return {content:[{type:"text",text:`Error: ${o}`}],isError:true}}});}function Ke(r){r.tool("system_datetime",{description:z.string().describe("Returns the current system date and time in multiple formats including local time, UTC, ISO, and Unix timestamp")},async()=>{try{let e=new Date,s={year:"numeric",month:"long",day:"numeric",hour:"2-digit",minute:"2-digit",second:"2-digit",timeZoneName:"short"},t=e.toLocaleString(void 0,s),o={year:"numeric",month:"long",day:"numeric",hour:"2-digit",minute:"2-digit",second:"2-digit",timeZone:"UTC",timeZoneName:"short"},n=e.toLocaleString(void 0,o);return {content:[{type:"text",text:`
## Current Date and Time
- **Local (${Intl.DateTimeFormat().resolvedOptions().timeZone})**: ${t}
- **UTC**: ${n}
- **ISO**: ${e.toISOString()}
- **Unix Timestamp**: ${Math.floor(e.getTime()/1e3)}
        `.trim()}]}}catch(e){return {content:[{type:"text",text:`Error: ${e}`}],isError:true}}});}function Qe(r,e){r.tool("slack_user_search",{query:z.string().describe("A search term to find Slack users. Can be a display name, username, or partial match.")},async({query:s})=>{try{let t=e.workspace,o=await w(t,e),n=s.trim().replace(/^@/,"");if(!n)return {content:[{type:"text",text:"Please provide a search term to find users."}],isError:!0};let a=await o.users.list({});if(!a.ok||!a.members)return {content:[{type:"text",text:"Failed to retrieve user list from Slack."}],isError:!0};let i=a.members.filter(l=>l.deleted||l.is_bot?!1:l.profile?.display_name?.toLowerCase().includes(n.toLowerCase())||l.profile?.real_name?.toLowerCase().includes(n.toLowerCase())||l.name?.toLowerCase().includes(n.toLowerCase()));if(i.length===0)return {content:[{type:"text",text:`No users found matching "${s}".`}]};let c=i.map(l=>{let u=l.profile?.display_name||"",g=l.profile?.real_name||"",h=`@${l.name||""}`,k=u.includes(" ")?`from:"${u}"`:`from:${h}`;return {id:l.id,username:h,display_name:u,real_name:g,search_format:k}});c.sort((l,u)=>l.username.toLowerCase()===`@${n.toLowerCase()}`?-1:u.username.toLowerCase()===`@${n.toLowerCase()}`?1:l.display_name.toLowerCase()===n.toLowerCase()?-1:u.display_name.toLowerCase()===n.toLowerCase()?1:l.display_name.localeCompare(u.display_name));let m=`## User Search Results for "${s}"

`;return m+=`| User | Display Name | Search Format |
`,m+=`|------|-------------|---------------|
`,c.forEach(l=>{m+=`| ${l.username} | ${l.display_name||l.real_name} | \`${l.search_format}\` |
`;}),m+=`
*Found ${c.length} matching users*
`,m+=`
To search for messages from these users, use the search format in the slack_search tool.`,{content:[{type:"text",text:m}]}}catch(t){return {content:[{type:"text",text:`Error searching for users: ${t}`}],isError:true}}});}function Ve(r,e){r.tool("slack_channel_search",{query:z.string().describe("A search term to find Slack channels. Can be a channel name or partial match.")},async({query:s})=>{try{let t=e.workspace,o=await w(t,e),n=s.trim().replace(/^#/,""),a=n.match(/^<#(C[A-Z0-9]+)\|.+>$/);if(a&&(n=a[1]),!n)return {content:[{type:"text",text:"Please provide a search term to find channels."}],isError:!0};let i=await o.conversations.list({types:"public_channel",exclude_archived:!0,limit:1e3}),c=await o.conversations.list({types:"private_channel",exclude_archived:!0,limit:1e3}),m=[...i.channels||[],...c.channels||[]];if(!m.length)return {content:[{type:"text",text:"No channels found in the workspace or you don't have access to any channels."}],isError:!0};let l=m.filter(d=>d.is_archived?!1:n.match(/^C[A-Z0-9]+$/)?d.id===n:d.name&&d.name.toLowerCase().includes(n.toLowerCase())||d.topic?.value&&d.topic.value.toLowerCase().includes(n.toLowerCase())||d.purpose?.value&&d.purpose.value.toLowerCase().includes(n.toLowerCase()));if(l.length===0)return {content:[{type:"text",text:`No channels found matching "${s}".`}]};let u=l.map(d=>{let h=d.name||"",k=d.id||"",b=d.is_private||!1,y=d.num_members||0,L=d.topic?.value||"",J=`in:${h}`,at=`in:<#${k}>`;return {id:k,name:h,is_private:b,member_count:y,topic:L,name_search_format:J,id_search_format:at}});u.sort((d,h)=>d.name.toLowerCase()===n.toLowerCase()?-1:h.name.toLowerCase()===n.toLowerCase()?1:h.member_count-d.member_count);let g=`## Channel Search Results for "${s}"

`;return g+=`| Channel | Members | Private | Search Format | ID Search Format | Topic |
`,g+=`|---------|---------|---------|---------------|------------------|-------|
`,u.forEach(d=>{let h=d.is_private?"\u{1F512} "+d.name:"#"+d.name,k=d.topic.length>30?d.topic.substring(0,30)+"...":d.topic;g+=`| ${h} | ${d.member_count} | ${d.is_private?"Yes":"No"} | \`${d.name_search_format}\` | \`${d.id_search_format}\` | ${k} |
`;}),g+=`
*Found ${u.length} matching channels*
`,g+=`
To search for messages in these channels, use either search format in the slack_search tool:
`,g+="- Name format: `in:general hello` (works for public channels)\n",g+="- ID format: `in:<#C12345> hello` (works for any channel you're a member of, including private channels)\n",g+=`
Note: Channel searches using any format will only work for channels you're a member of.`,{content:[{type:"text",text:g}]}}catch(t){return {content:[{type:"text",text:`Error searching for channels: ${t}`}],isError:true}}});}function Xe(r,e){r.tool("slack_get_user_profile",{user_id:z.string().describe('Slack user ID to get profile information for. Must start with "U" followed by alphanumeric characters.')},async({user_id:s})=>{try{let t=await Ne(s,e),o=`## Slack User Profile: ${t.displayName}

`;if(o+=`### Basic Information
`,o+=`- **User ID:** \`${t.userId}\`
`,o+=`- **Username:** @${t.username}
`,o+=`- **Display Name:** ${t.displayName}
`,o+=`- **Real Name:** ${t.realName||"Not set"}
`,o+=`- **Job Title:** ${t.title||"Not set"}
`,o+=`- **Email:** ${t.email||"Not available"}
`,o+=`- **Phone:** ${t.phone||"Not set"}
`,o+=`
### Status
`,o+=`- **Current Status:** ${t.status.text?t.status.text:"No status set"} ${t.status.emoji||""}
`,t.status.expiration&&(o+=`- **Status Expiration:** ${t.status.expiration}
`),o+=`
### Account Information
`,o+=`- **Team ID:** ${t.teamId||"Unknown"}
`,o+=`- **Timezone:** ${t.timezone||"Unknown"} (${t.timezoneLabel||""})
`,o+=`- **Account Type:** ${t.isBot?"Bot":"User"}
`,t.isAdmin||t.isOwner){let n=[];t.isOwner&&n.push("Owner"),t.isAdmin&&n.push("Admin"),o+=`- **Roles:** ${n.join(", ")}
`;}if(t.isRestricted||t.isUltraRestricted){let n=[];t.isRestricted&&n.push("Restricted"),t.isUltraRestricted&&n.push("Ultra Restricted"),o+=`- **Restrictions:** ${n.join(", ")}
`;}return o+=`- **Last Updated:** ${t.updated||"Unknown"}
`,t.avatarUrl&&(o+=`
### Profile Image
`,o+=`![${t.displayName}'s profile picture](${t.avatarUrl})
`),{content:[{type:"text",text:o}]}}catch(t){return {content:[{type:"text",text:`Error fetching user profile: ${t}`}],isError:true}}});}function et(r,e){Be(r,e),ze(r,e),Ge(r,e),qe(r,e),Je(r,e),He(r,e),Qe(r,e),Ve(r,e),Xe(r,e),Ke(r);}function tt(r,e){r.command("mcp").description("Start an MCP server with search and status capabilities").action(async()=>{e.hasWorkspace||(console.error("Error: Workspace must be specified with --workspace or --last-workspace"),console.error("Example: slack-tools mcp --workspace your-workspace"),process.exit(1));let s=new McpServer({name:"slack-tools-server",version:"1.0.2"});et(s,e);let t=new StdioServerTransport;await s.connect(t);});}function rt(r,e){r.command("create-reminder <text>").description("Create a new Slack reminder").option("-t, --time <time>",'When to remind (unix timestamp, ISO datetime, or relative time like "in 5 minutes")',"in 30 minutes").option("-u, --user <user>","User ID to create reminder for (defaults to current user)").action(async(s,t)=>{try{console.log(`Creating reminder: "${s}" at ${t.time}`),t.user&&console.log(`For user: ${t.user}`);let o=await I(s,t.time,e,t.user);if(o.success){if(console.log("\u2705 Reminder created successfully!"),o.reminder){let n=new Date(parseInt((o.reminder.time||0).toString())*1e3).toLocaleString();console.log(`Text: ${o.reminder.text}`),console.log(`Time: ${n}`);}}else console.log("\u274C Failed to create reminder");}catch(o){console.error("Error:",o),process.exit(1);}});}function ot(r,e){r.command("thread <channel> <timestamp>").description("Get replies in a Slack thread").option("-l, --limit <number>","Maximum number of replies to fetch","20").action(async(s,t,o)=>{try{let n=parseInt(o.limit,10);console.log(`Fetching replies for thread in channel ${s} at timestamp ${t}`),console.log(`Limit: ${n} replies`);let a=await R(s,t,e,n);if(a.replies.length===0){console.log("No replies found in this thread.");return}console.log(`Found ${a.replies.length} replies:
`),a.replies.forEach((i,c)=>{let m=i.user||"unknown",l=m&&a.users[m]?a.users[m].displayName:m,u=i.ts?new Date(parseInt(i.ts)*1e3).toLocaleString():"unknown time";console.log(`Reply #${c+1}:`),console.log(`From: ${l}`),console.log(`Time: ${u}`),console.log(`Text: ${i.text||""}`),console.log();});}catch(n){console.error("Error:",n),process.exit(1);}});}function st(r,e){r.command("activity").description("Get activity statistics for a Slack user across channels").option("-u, --user <user-id>","User ID to analyze (defaults to current user)").option("-c, --count <number>","Number of messages to analyze","100").action(async s=>{try{let t=parseInt(s.count,10);console.log("Analyzing user activity..."),s.user?console.log(`User: ${s.user}`):console.log("User: current user"),console.log(`Analyzing ${t} most recent messages`);let o=await P(t,e,s.user);if(console.log(`
-------------------------------------`),console.log(`User Activity Summary for ${o.userId}`),console.log("-------------------------------------"),console.log(`Total Messages: ${o.totalMessages}`),console.log(`Time Period: ${o.timePeriod}`),console.log(`
Channel Breakdown:`),console.log("-------------------------------------"),o.channelBreakdown.length===0)console.log("No channel activity found.");else {let n=Math.max(...o.channelBreakdown.map(a=>a.channelName.length),15);console.log("Channel".padEnd(n),"Messages".padStart(10),"Percentage".padStart(12)),console.log("-".repeat(n+24)),o.channelBreakdown.forEach(a=>{let i=(a.messageCount/o.totalMessages*100).toFixed(1);console.log(a.channelName.padEnd(n),a.messageCount.toString().padStart(10),`${i}%`.padStart(12));});}console.log("-------------------------------------");}catch(t){console.error("Error:",t),process.exit(1);}});}function nt(r,e){ae(r),ke(r,e),Ue(r,e),Ae(r,e),Pe(r,e),je(r,e),tt(r,e),rt(r,e),ot(r,e),st(r,e);}var G=class{_workspace;_lastWorkspaceUsed=false;_debug=false;set workspace(e){this._workspace=e;}get workspace(){return this._workspace||(console.error("Error: No workspace specified. Please specify a workspace using:"),console.error("  - Use -w, --workspace <workspace> to specify a workspace directly"),console.error("  - Use -l, --last-workspace to use your most recently used workspace"),process.exit(1)),this._workspace}get hasWorkspace(){return !!this._workspace}set lastWorkspaceUsed(e){this._lastWorkspaceUsed=e;}get lastWorkspaceUsed(){return this._lastWorkspaceUsed}set debug(e){this._debug=e;}get debug(){return this._debug}debugLog(e,...s){this._debug&&(s.length>0?console.error("[DEBUG]",e,...s):console.error("[DEBUG]",e));}};var Zt=fileURLToPath(import.meta.url),Ht=dirname(Zt),Kt=JSON.parse(readFileSync(join(Ht,"../package.json"),"utf8")),q=new Command;q.name("slack-tools").description("CLI for extracting Slack tokens and cookies and making API calls").version(Kt.version).option("-w, --workspace <workspace>","Specify Slack workspace URL or name").option("-l, --last-workspace","Use the last used workspace").option("-d, --debug","Enable debug mode for detailed logging");var C=new G;nt(q,C);q.hook("preAction",async r=>{let e=r.opts();if(e.debug&&(C.debug=true,C.debugLog("Debug mode enabled")),e.workspace)C.workspace=e.workspace,C.debugLog(`Using workspace: ${e.workspace}`),await Ee(e.workspace);else if(e.lastWorkspace){let s=await ve();s?(C.workspace=s,C.lastWorkspaceUsed=true,C.debugLog(`Using last workspace: ${s}`)):(console.error("No last workspace found. Please specify a workspace using --workspace."),C.debugLog("No last workspace found in cache"));}});q.parse(process.argv);//# sourceMappingURL=cli.js.map
//# sourceMappingURL=cli.js.map