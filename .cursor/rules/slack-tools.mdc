---
description:
globs:
alwaysApply: true
---

# Slack Tools Guidelines

## TypeScript Guidelines

### General TypeScript Guidelines

- Always use types from the @slack/web-api package when available
- Follow TypeScript best practices like explicit return types
- Avoid any type unless absolutely necessary
- Use interfaces instead of types for object definitions
- Prefer explicit member accessibility (public, private)
- Use strict boolean expressions
- Properly handle Promise returns and potential errors

### TypeScript Code Style

- Use 2 spaces for indentation
- Use single quotes for strings
- Limit line length to 100 characters
- Use trailing commas in multiline objects and arrays
- Prefer const over let, avoid var
- Use optional chaining and nullish coalescing operators
- Explicitly handle Promise rejections and errors

## Command Handling

### Workspace Selection

- Always default to using "Build" as the workspace when running commands
- Allow explicit workspace specification via command line arguments

### Command Safety

- Classify all commands as either "safe" or "unsafe":
  - Safe commands (read-only): print, test, today, search, list, help
  - Unsafe commands (modify data): post, update, delete, create, modify, send, status
- Never automatically run commands that modify Slack data without permission
- Always run commands and verify output before assuming task completion
- Wait for user approval before running any command that mutates data

### Command Implementation

- Each command should have a clear, single responsibility
- Implement proper error handling and validation
- Provide helpful usage examples in help text
- Follow consistent parameter naming across commands
- Support both required and optional parameters appropriately

## Slack API Integration

### Type Definitions

- Always import and use types from @slack/web-api instead of creating custom types
- When extending Slack API types, document the reason and maintain compatibility
- Use specific types from @slack/web-api/dist/types/response/* for response handling

### API Usage

- Handle rate limiting appropriately
- Implement proper error handling for all API calls
- Use pagination when fetching large datasets
- Cache user and channel information when appropriate
- Validate input before sending to the API

### Error Handling

- Use descriptive error messages
- Capture and log API errors with relevant context
- Handle token validation and authentication errors gracefully
- Provide user-friendly error messages when possible

## Running the Tool

### Installation and Setup

1. Clone the repository
2. Install dependencies:
   ```bash
   npm install
   ```
3. Make the tool globally available:
   ```bash
   npm link
   ```

### Command Execution

- Always run slack-tools commands via `npx tsx src/cli.ts` or the installed CLI command `slack-tools`
- Make sure the Slack app is closed when running commands (required to access the LevelDB database)
- When adding new commands, follow the same structure as existing commands in src/commands/
- Register all new commands in src/commands/index.ts

### Command Format

```bash
# General format
slack-tools [options] <command> [command-options]

# Global options
# -w, --workspace <workspace>  Specify Slack workspace URL or name
# -l, --last-workspace         Use the last used workspace
# -d, --debug                  Enable debug mode for detailed logging
```

### Example: Status Command

Set your Slack status:

```bash
slack-tools [options] status [status-options] <text>
```

Options:
- `--emoji <emoji>` - Emoji for the status (optional)
- `--duration <duration>` - Duration in minutes before status expires (omit for permanent)

**Important Note:** When using the status command with multi-word text and options, use the `--option=value` format:

Examples:
```bash
# Set "lunch break" status with pizza emoji for 30 minutes
slack-tools -w Build status "lunch break" --emoji=pizza --duration=30

# Set "focus time" status with headphones emoji, no expiration
slack-tools -w Build status "focus time" --emoji=headphones

# Set "in a meeting" status without emoji for 60 minutes
slack-tools -w Build status "in a meeting" --duration=60

# Set "away" status with no emoji and no expiration
slack-tools -w Build status away
```

### Example: Today Command

Generate a summary of your Slack activity:

```bash
slack-tools [options] today [today-options]
```

Options:
- `-u, --username <username>` - Slack username to filter by
- `-s, --since <date>` - Start date (YYYY-MM-DD format), defaults to today
- `-e, --until <date>` - End date (YYYY-MM-DD format), defaults to today
- `-c, --count <number>` - Number of messages to fetch (default: 200)
- `-o, --output <file>` - Output markdown to a file

Examples:
```bash
# Get today's activity summary
slack-tools -w Build today

# Get activity for a specific date range
slack-tools -w Build today -s 2023-03-01 -e 2023-03-31

# Save the summary to a file
slack-tools -w Build today -o activity-report.md
```

Note: Replace "Build" with your actual workspace name.

## Requirements

- Node.js 14.0.0 or higher
- macOS or Linux operating system
- Slack desktop app installed
